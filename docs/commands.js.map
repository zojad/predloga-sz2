{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(start)\");\r\n\r\n      // clear any previous highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // find every standalone \"s\" or \"z\"\r\n      const opts    = { matchCase: false, matchWholeWord: true };\r\n      const sSearch = context.document.body.search(\"s\", opts);\r\n      const zSearch = context.document.body.search(\"z\", opts);\r\n      sSearch.load(\"items\");\r\n      zSearch.load(\"items\");\r\n      await context.sync();\r\n\r\n      const allRanges   = [...sSearch.items, ...zSearch.items];\r\n      const candidates  = allRanges.filter(r => [\"s\",\"z\"].includes(r.text.trim().toLowerCase()));\r\n      console.log(\"→ found\", candidates.length, \"s/z candidates\");\r\n\r\n      const errors = [];\r\n      for (const prep of candidates) {\r\n        // get a zero-length range right after the \"s\" or \"z\"\r\n        const after = prep.getRange(\"After\");\r\n\r\n        // expand it to capture the next word up to whitespace/punctuation\r\n        const nextWordRange = after.getNextTextRange(\r\n          [\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], /* trimSpacing= */ true\r\n        );\r\n        nextWordRange.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = nextWordRange.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          // *track* this Range so later batches can modify it\r\n          context.trackedObjects.add(prep);\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ mismatches found:\", errors.length);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No 's'/'z' mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        // highlight them and select the first one\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n    Office.actions.associate(\"checkDocumentText\",   checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\",    acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\",    rejectAllChanges);\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sSearch","context","document","body","search","zSearch","load","sync","candidates","items","filter","r","includes","text","trim","length","prep","nextWordRange","getRange","getNextTextRange","nextWord","actual","expect","trackedObjects","add","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate"],"sourceRoot":""}