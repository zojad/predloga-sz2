{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide correct preposition for S/Z and K/H.\r\n */\r\nfunction determineCorrectPreposition(nextWord, prepLower) {\r\n  if (!nextWord) return null;\r\n  const nw = nextWord.normalize(\"NFC\").trim();\r\n  if (!nw) return null;\r\n  let ch = nw[0];\r\n  const digitMap = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = (ch >= '0' && ch <= '9') ? digitMap[ch] : ch.toLowerCase();\r\n\r\n  if (prepLower === \"s\" || prepLower === \"z\") {\r\n    const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n    return unvoiced.has(key) ? \"s\" : \"z\";\r\n  }\r\n  if (prepLower === \"k\" || prepLower === \"h\") {\r\n    return (key === \"k\" || key === \"g\") ? \"h\" : \"k\";\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Collect every Range we want to scan:\r\n *  - main body\r\n *  - each section’s primary header.body & footer.body\r\n * We also load(\"text\") on each so search() actually sees content.\r\n */\r\nasync function collectScanRanges(context) {\r\n  const ranges = [];\r\n\r\n  // 1) main document body\r\n  const body = context.document.body;\r\n  ranges.push(body);\r\n  body.load(\"text\");\r\n\r\n  // 2) headers & footers\r\n  if (context.document.sections) {\r\n    const sections = context.document.sections;\r\n    sections.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const section of sections.items) {\r\n      // primary header\r\n      try {\r\n        const hdrBody = section.getHeader(\"primary\").body;\r\n        ranges.push(hdrBody);\r\n        hdrBody.load(\"text\");\r\n      } catch { /* no header here */ }\r\n\r\n      // primary footer\r\n      try {\r\n        const ftrBody = section.getFooter(\"primary\").body;\r\n        ranges.push(ftrBody);\r\n        ftrBody.load(\"text\");\r\n      } catch { /* no footer here */ }\r\n    }\r\n  }\r\n\r\n  // sync so every Range.text is populated\r\n  await context.sync();\r\n  return ranges;\r\n}\r\n\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      // clear any prior highlights everywhere\r\n      for (const rng of scanRanges) {\r\n        rng.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n\r\n      const mismatches = [];\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw   = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          mismatches.push(r);\r\n        }\r\n      }\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\", message: \"✨ No mismatches!\", icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\", message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw   = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          const replacement = raw === raw.toUpperCase()\r\n            ? expected.toUpperCase()\r\n            : expected;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.insertText(replacement, Word.InsertLocation.replace);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\", message: \"Accepted all!\", icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\", message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          if (!/^[sSzZkKhH]$/.test(raw)) continue;\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\", message: \"Cleared all!\", icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\", message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    const makeHandler = fn => async event => {\n      console.log(`▶️ ${fn.name} invoked`);\n      try {\n        await fn();\n      } catch (e) {\n        console.error(`${fn.name} threw:`, e);\n      } finally {\n        event.completed();    // tell Word we’re done\n      }\n    };\n\n    Office.actions.associate(\n      \"checkDocumentText\",\n      makeHandler(checkDocumentText)\n    );\n    Office.actions.associate(\n      \"acceptAllChanges\",\n      makeHandler(acceptAllChanges)\n    );\n    Office.actions.associate(\n      \"rejectAllChanges\",\n      makeHandler(rejectAllChanges)\n    );\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","nextWord","prepLower","nw","normalize","trim","ch","key","toLowerCase","Set","has","async","collectScanRanges","context","ranges","body","document","push","load","sections","sync","section","items","hdrBody","getHeader","ftrBody","getFooter","checkDocumentText","Word","run","matchWholeWord","matchCase","scanRanges","rng","font","highlightColor","mismatches","sRes","search","zRes","kRes","hRes","r","lower","text","includes","after","getRange","getNextTextRange","nxt","expected","trackedObjects","add","length","first","select","type","message","icon","e","console","error","acceptAllChanges","raw","replacement","toUpperCase","insertText","InsertLocation","replace","rejectAllChanges","test","log","onReady","info","host","HostType","makeHandler","fn","name","event","completed","actions","associate"],"sourceRoot":""}