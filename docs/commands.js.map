{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// –– State ––\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// –– Helpers ––\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n// –– Core logic helper ––\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n// –– Exposed commands ––//\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(start)\");\r\n\r\n      // clear any prior highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // do two whole-word searches: “s” and “z”\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sSearch = context.document.body.search(\"s\", opts);\r\n      const zSearch = context.document.body.search(\"z\", opts);\r\n      sSearch.load(\"items\");\r\n      zSearch.load(\"items\");\r\n      await context.sync();\r\n\r\n      const allRanges = [...sSearch.items, ...zSearch.items];\r\n      console.log(\"→ raw hits:\", allRanges.length);\r\n\r\n      // filter down to exact lowercase “s” or “z”\r\n      const candidates = allRanges.filter(r =>\r\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\r\n      );\r\n      console.log(\"→ filtered candidates:\", candidates.length);\r\n\r\n      // now inspect each candidate\r\n      const errors = [];\r\n      for (let prep of candidates) {\r\n        const after = prep.getRange(Word.RangeLocation.After);\r\n        after.expandTo(Word.TextRangeUnit.Word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ mismatches found:\", errors.length);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        // highlight and select the first one\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange()\", state.currentIndex, \"of\", state.errors.length);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange()\", state.currentIndex);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n      console.log(\"→ accepted all\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      state.errors = [];\r\n      console.log(\"→ rejected all\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n    Office.actions.associate(\"checkDocumentText\",   checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\",    acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\",    rejectAllChanges);\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sSearch","context","document","body","search","zSearch","load","sync","allRanges","items","length","candidates","filter","r","includes","text","trim","prep","after","getRange","RangeLocation","After","expandTo","TextRangeUnit","nextWord","actual","expect","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate"],"sourceRoot":""}