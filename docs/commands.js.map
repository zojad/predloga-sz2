{"version":3,"file":"commands.js","mappings":"YAEA,MAAMA,EAAQ,CACZC,OAAQ,GACRC,aAAc,GAiBhB,SAASC,EAA4BC,GACnC,IAAKA,EAAM,OAAO,KAElB,MAAMC,EAAqB,IAAIC,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACtEC,EAAuB,CAC3B,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAC7C,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,KAG/C,IAAIC,EAAY,GAChB,IAAK,MAAMC,KAAQL,EACjB,GAAIK,EAAKC,MAAM,qBAAsB,CACnCF,EAAYC,EAAKE,cACjB,KACF,CAGF,IAAKH,EAAW,OAAO,KAEvB,GAAIA,GAAa,KAAOA,GAAa,IAAK,CACxC,MAAMI,EAAgBL,EAAqBC,GAC3C,OAAOH,EAAmBQ,IAAID,GAAiB,IAAM,GACvD,CAEA,OAAOP,EAAmBQ,IAAIL,GAAa,IAAM,GACnD,CAEAM,eAAeC,IACb,UACQC,KAAKC,KAAIH,UACbd,EAAMC,OAAOiB,SAAQC,IACnBA,EAAIC,MAAMC,KAAKC,eAAiB,IAAI,IAEtCtB,EAAMC,OAAS,GACfD,EAAME,aAAe,EAErB,MAAMqB,EAAgB,CAAEC,WAAW,EAAOC,gBAAgB,GAEpDC,EAAe,CACnBC,EAAQC,SAASC,KACjBF,EAAQC,SAASE,SAASC,WAAWC,UAAU,WAC/CL,EAAQC,SAASE,SAASC,WAAWE,UAAU,YAGjD,IAAIC,EAAa,GAEjB,IAAK,MAAMC,KAAST,EAAc,CAChC,MAAMU,EAAWD,EAAME,OAAO,IAAKd,GAC7Be,EAAWH,EAAME,OAAO,IAAKd,GACnCa,EAASG,KAAK,SACdD,EAASC,KAAK,eACRZ,EAAQa,OACdN,EAAWO,QAAQL,EAASM,SAAUJ,EAASI,MACjD,CAEA,MAAMC,EAAUT,EAAWU,QAAQC,GAAS,CAAC,IAAK,KAAKC,SAASD,EAAKE,KAAKC,OAAOrC,iBAE3EV,EAAS,GAEf,IAAK,MAAM4C,KAAQF,EACjB,IACE,MAAMM,EAAaJ,EAAKK,SAAS,SACjCD,EAAWE,SAASnC,KAAKoC,cAAchD,MACvC6C,EAAWV,KAAK,cACVZ,EAAQa,OAEd,MAAMa,EAAcR,EAAKE,KAAKC,OAAOrC,cAE/B2C,EAAcnD,EADH8C,EAAWF,KAAKC,QAG7BM,GAAeD,IAAgBC,GACjCrD,EAAOwC,KAAK,CACVrB,MAAOyB,EACPU,WAAYD,GAGlB,CAAE,MAAOnC,GACPqC,QAAQC,KAAK,oCAAqCZ,EAAKE,KAAM5B,EAC/D,CAGFnB,EAAMC,OAASA,EAEfD,EAAMC,OAAOiB,SAAQC,IACnBA,EAAIC,MAAMC,KAAKC,eAAiB,QAAQ,UAGpCK,EAAQa,OAEVxC,EAAMC,OAAOyD,OAAS,EACxB1D,EAAMC,OAAO,GAAGmB,MAAMuC,SAEtBH,QAAQI,IAAI,+BACd,GAEJ,CAAE,MAAOC,GACPL,QAAQK,MAAM,yBAA0BA,EAC1C,CACF,CAEA/C,eAAegD,IACb,KAAI9D,EAAME,cAAgBF,EAAMC,OAAOyD,QAEvC,UACQ1C,KAAKC,KAAIH,UACb,MAAMK,EAAMnB,EAAMC,OAAOD,EAAME,cAC/BiB,EAAIC,MAAM2C,WAAW5C,EAAIoC,WAAYvC,KAAKgD,eAAeC,SACzD9C,EAAIC,MAAMC,KAAKC,eAAiB,WAC1BK,EAAQa,OACdxC,EAAME,eAEFF,EAAME,aAAeF,EAAMC,OAAOyD,QACpC1D,EAAMC,OAAOD,EAAME,cAAckB,MAAMuC,QACzC,GAEJ,CAAE,MAAOE,GACPL,QAAQK,MAAM,2BAA4BA,EAC5C,CACF,CAEA/C,eAAeoD,IACb,KAAIlE,EAAME,cAAgBF,EAAMC,OAAOyD,QAEvC,UACQ1C,KAAKC,KAAIH,UACDd,EAAMC,OAAOD,EAAME,cAC3BkB,MAAMC,KAAKC,eAAiB,WAC1BK,EAAQa,OACdxC,EAAME,eAEFF,EAAME,aAAeF,EAAMC,OAAOyD,QACpC1D,EAAMC,OAAOD,EAAME,cAAckB,MAAMuC,QACzC,GAEJ,CAAE,MAAOE,GACPL,QAAQK,MAAM,2BAA4BA,EAC5C,CACF,CAEA/C,eAAeqD,IACb,GAA4B,IAAxBnE,EAAMC,OAAOyD,OAEjB,UACQ1C,KAAKC,KAAIH,UACb,IAAK,MAAMK,KAAOnB,EAAMC,OACtBkB,EAAIC,MAAM2C,WAAW5C,EAAIoC,WAAYvC,KAAKgD,eAAeC,SACzD9C,EAAIC,MAAMC,KAAKC,eAAiB,WAE5BK,EAAQa,OACdxC,EAAMC,OAAS,EAAE,GAErB,CAAE,MAAO4D,GACPL,QAAQK,MAAM,gCAAiCA,EACjD,CACF,CAEA/C,eAAesD,IACb,GAA4B,IAAxBpE,EAAMC,OAAOyD,OAEjB,UACQ1C,KAAKC,KAAIH,UACb,IAAK,MAAMK,KAAOnB,EAAMC,OACtBkB,EAAIC,MAAMC,KAAKC,eAAiB,WAE5BK,EAAQa,OACdxC,EAAMC,OAAS,EAAE,GAErB,CAAE,MAAO4D,GACPL,QAAQK,MAAM,gCAAiCA,EACjD,CACF,CAxLAQ,OAAOC,SAASC,IACd,GAAIA,EAAKC,OAASH,OAAOI,SAASzD,KAChC,IACEqD,OAAOK,QAAQC,UAAU,oBAAqB5D,GAC9CsD,OAAOK,QAAQC,UAAU,mBAAoBR,GAC7CE,OAAOK,QAAQC,UAAU,mBAAoBP,GAC7CC,OAAOK,QAAQC,UAAU,sBAAuBb,GAChDO,OAAOK,QAAQC,UAAU,sBAAuBT,EAClD,CAAE,MAAOL,GACPL,QAAQK,MAAM,gCAAiCA,EACjD,CACF,IA+KFe,OAAO7D,kBAAoBA,EAC3B6D,OAAOT,iBAAmBA,EAC1BS,OAAOR,iBAAmBA,EAC1BQ,OAAOd,oBAAsBA,EAC7Bc,OAAOV,oBAAsBA,C","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\nconst state = {\n  errors: [],\n  currentIndex: 0,\n};\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    try {\n      Office.actions.associate(\"checkDocumentText\", checkDocumentText);\n      Office.actions.associate(\"acceptAllChanges\", acceptAllChanges);\n      Office.actions.associate(\"rejectAllChanges\", rejectAllChanges);\n      Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n      Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    } catch (error) {\n      console.error(\"Function registration failed:\", error);\n    }\n  }\n});\n\nfunction determineCorrectPreposition(word) {\n  if (!word) return null;\n\n  const unvoicedConsonants = new Set(['c', 'č', 'f', 'h', 'k', 'p', 's', 'š', 't']);\n  const numberPronunciations = {\n    '1': 'e', '2': 'd', '3': 't', '4': 'š', '5': 'p',\n    '6': 'š', '7': 's', '8': 'o', '9': 'd', '0': 'n'\n  };\n\n  let firstChar = \"\";\n  for (const char of word) {\n    if (char.match(/[a-zA-ZčČšŠžŽ0-9]/)) {\n      firstChar = char.toLowerCase();\n      break;\n    }\n  }\n\n  if (!firstChar) return null;\n\n  if (firstChar >= '0' && firstChar <= '9') {\n    const pronunciation = numberPronunciations[firstChar];\n    return unvoicedConsonants.has(pronunciation) ? \"s\" : \"z\";\n  }\n\n  return unvoicedConsonants.has(firstChar) ? \"s\" : \"z\";\n}\n\nasync function checkDocumentText() {\n  try {\n    await Word.run(async (context) => {\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = null;\n      });\n      state.errors = [];\n      state.currentIndex = 0;\n\n      const searchOptions = { matchCase: false, matchWholeWord: true };\n\n      const searchScopes = [\n        context.document.body,\n        context.document.sections.getFirst().getHeader(\"Primary\"),\n        context.document.sections.getFirst().getFooter(\"Primary\")\n      ];\n\n      let allResults = [];\n\n      for (const scope of searchScopes) {\n        const sResults = scope.search(\"s\", searchOptions);\n        const zResults = scope.search(\"z\", searchOptions);\n        sResults.load(\"items\");\n        zResults.load(\"items\");\n        await context.sync();\n        allResults.push(...sResults.items, ...zResults.items);\n      }\n\n      const results = allResults.filter((prep) => [\"s\", \"z\"].includes(prep.text.trim().toLowerCase()));\n\n      const errors = [];\n\n      for (const prep of results) {\n        try {\n          const afterRange = prep.getRange(\"After\");\n          afterRange.expandTo(Word.TextRangeUnit.word);\n          afterRange.load(\"text\");\n          await context.sync();\n\n          const currentPrep = prep.text.trim().toLowerCase();\n          const nextWord = afterRange.text.trim();\n          const correctPrep = determineCorrectPreposition(nextWord);\n\n          if (correctPrep && currentPrep !== correctPrep) {\n            errors.push({\n              range: prep,\n              suggestion: correctPrep\n            });\n          }\n        } catch (err) {\n          console.warn(\"Failed to get following word for:\", prep.text, err);\n        }\n      }\n\n      state.errors = errors;\n\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = \"Yellow\";\n      });\n\n      await context.sync();\n\n      if (state.errors.length > 0) {\n        state.errors[0].range.select();\n      } else {\n        console.log(\"No preposition errors found.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Document check failed:\", error);\n  }\n}\n\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to accept change:\", error);\n  }\n}\n\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to reject change:\", error);\n  }\n}\n\nasync function acceptAllChanges() {\n  if (state.errors.length === 0) return;\n\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to accept all changes:\", error);\n  }\n}\n\nasync function rejectAllChanges() {\n  if (state.errors.length === 0) return;\n\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to reject all changes:\", error);\n  }\n}\n\nwindow.checkDocumentText = checkDocumentText;\nwindow.acceptAllChanges = acceptAllChanges;\nwindow.rejectAllChanges = rejectAllChanges;\nwindow.acceptCurrentChange = acceptCurrentChange;\nwindow.rejectCurrentChange = rejectCurrentChange;\n"],"names":["state","errors","currentIndex","determineCorrectPreposition","word","unvoicedConsonants","Set","numberPronunciations","firstChar","char","match","toLowerCase","pronunciation","has","async","checkDocumentText","Word","run","forEach","err","range","font","highlightColor","searchOptions","matchCase","matchWholeWord","searchScopes","context","document","body","sections","getFirst","getHeader","getFooter","allResults","scope","sResults","search","zResults","load","sync","push","items","results","filter","prep","includes","text","trim","afterRange","getRange","expandTo","TextRangeUnit","currentPrep","correctPrep","suggestion","console","warn","length","select","log","error","acceptCurrentChange","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","Office","onReady","info","host","HostType","actions","associate","window"],"sourceRoot":""}