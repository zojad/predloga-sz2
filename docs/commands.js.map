{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Helpers for ribbon notifications\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// Decide “s” vs “z” based on the next word’s first letter\r\n// ─────────────────────────────────────────────────\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: highlight all mismatches, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear *only* your pink highlights (in case you run twice)\r\n      // NOTE: if you previously used only batch accept/reject, you can skip this.\r\n      context.document.body.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      // search for standalone \"s\" & \"z\"\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      const mismatches = [];\r\n\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        // look at next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // highlight it pink\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        mismatches.push(r);\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first mismatch\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept All: replace every mismatch in one batch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        // peek at next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        context.trackedObjects.add(r);\r\n        r.insertText(suggestion, Word.InsertLocation.replace);\r\n        r.font.highlightColor = null;\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject All: clear every pink mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        if (/^[sSzZ]$/.test(r.text.trim())) {\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    const makeHandler = fn => async event => {\n      console.log(`▶️ ${fn.name} invoked`);\n      try {\n        await fn();\n      } catch (e) {\n        console.error(`${fn.name} threw:`, e);\n      } finally {\n        event.completed();    // tell Word we’re done\n      }\n    };\n\n    Office.actions.associate(\n      \"checkDocumentText\",\n      makeHandler(checkDocumentText)\n    );\n    Office.actions.associate(\n      \"acceptAllChanges\",\n      makeHandler(acceptAllChanges)\n    );\n    Office.actions.associate(\n      \"rejectAllChanges\",\n      makeHandler(rejectAllChanges)\n    );\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","context","document","body","font","highlightColor","sync","matchWholeWord","matchCase","sRes","search","zRes","load","mismatches","r","items","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","trackedObjects","add","push","length","first","select","type","message","icon","e","console","error","acceptAllChanges","suggestion","toUpperCase","insertText","InsertLocation","replace","rejectAllChanges","log","onReady","info","host","HostType","makeHandler","fn","name","event","completed","actions","associate"],"sourceRoot":""}