{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\n// Helper wrappers for NotificationMessages (guard against undefined)\nfunction clearNotification(id) {\n  if (\n    Office.NotificationMessages &&\n    typeof Office.NotificationMessages.deleteAsync === \"function\"\n  ) {\n    Office.NotificationMessages.deleteAsync(id);\n  }\n}\n\nfunction showNotification(id, options) {\n  if (\n    Office.NotificationMessages &&\n    typeof Office.NotificationMessages.addAsync === \"function\"\n  ) {\n    Office.NotificationMessages.addAsync(id, options);\n  }\n}\n\n// Only register our ribbon commands once\nif (!window._SZ_functionsRegistered) {\n  window._SZ_functionsRegistered = true;\n\n  Office.onReady((info) => {\n    if (info.host === Office.HostType.Word) {\n      try {\n        Office.actions.associate(\"checkDocumentText\",    checkDocumentText);\n        Office.actions.associate(\"acceptAllChanges\",     acceptAllChanges);\n        Office.actions.associate(\"rejectAllChanges\",     rejectAllChanges);\n        Office.actions.associate(\"acceptCurrentChange\",  acceptCurrentChange);\n        Office.actions.associate(\"rejectCurrentChange\",  rejectCurrentChange);\n      } catch (error) {\n        console.error(\"Function registration failed:\", error);\n        showNotification(\"regError\", {\n          type: \"errorMessage\",\n          message: \"Add-in initialization failed. Please reload.\",\n          persistent: false\n        });\n      }\n    }\n  });\n}\n\n// State for errors and control flow\nconst state = {\n  errors: [], currentIndex: 0, isChecking: false\n};\n\n// Highlight color for detected errors: light pink\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\nconst NOTIF_ID = \"noErrors\";\n\n// Map a raw word (letter or digit start) to the correct 's' or 'z'\nfunction determineCorrectPreposition(rawWord) {\n  if (!rawWord) return null;\n  const word = rawWord.normalize(\"NFC\");\n  const match = word.match(/[\\p{L}0-9]/u);\n  if (!match) return null;\n  const firstChar = match[0].toLowerCase();\n\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\n  const numPron = {\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\n  };\n\n  if (/\\d/.test(firstChar)) {\n    return unvoiced.has(numPron[firstChar]) ? \"s\" : \"z\";\n  }\n  return unvoiced.has(firstChar) ? \"s\" : \"z\";\n}\n\n// Main scan: highlight mismatches, or notify if none\nasync function checkDocumentText() {\n  if (state.isChecking) return;\n  state.isChecking = true;\n  clearNotification(NOTIF_ID);\n\n  try {\n    await Word.run(async (context) => {\n      // Clear previous highlights\n      state.errors.forEach(e => e.range.font.highlightColor = null);\n      state.errors = [];\n      state.currentIndex = 0;\n\n      const opts = { matchCase: false, matchWholeWord: true };\n      let allRanges = [];\n\n      async function addSearchResults(scope) {\n        const res = scope.search(\"\\\\b[sz]\\\\b\", opts);\n        res.load(\"items\");\n        await context.sync();\n        allRanges.push(...res.items);\n      }\n\n      await addSearchResults(context.document.body);\n\n      const secs = context.document.sections;\n      secs.load(\"items\"); await context.sync();\n      for (const s of secs.items) {\n        await addSearchResults(s.getHeader(\"Primary\"));\n        await addSearchResults(s.getFooter(\"Primary\"));\n      }\n\n      const ccs = context.document.contentControls;\n      ccs.load(\"items\"); await context.sync();\n      for (const cc of ccs.items) await addSearchResults(cc);\n\n      const tables = context.document.body.tables;\n      tables.load(\"items\"); await context.sync();\n      for (const t of tables.items) await addSearchResults(t.getRange());\n\n      const candidates = allRanges.filter(r =>\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\n      );\n\n      const errors = [];\n      for (const prep of candidates) {\n        const after = prep.getRange(\"After\");\n        after.expandTo(Word.TextRangeUnit.word);\n        after.load(\"text\");\n        await context.sync();\n\n        const nextWord = after.text.trim();\n        if (!nextWord) continue;\n\n        const curr = prep.text.trim().toLowerCase();\n        const corr = determineCorrectPreposition(nextWord);\n        if (corr && curr !== corr) {\n          errors.push({ range: prep, suggestion: corr });\n        }\n      }\n\n      state.errors = errors;\n      if (errors.length === 0) {\n        showNotification(NOTIF_ID, {\n          type: \"informationalMessage\",\n          message: \"Ni najdenih napak.\",\n          icon: \"Icon.80x80\",\n          persistent: false\n        });\n        return;\n      }\n\n      for (const e of errors) {\n        e.range.font.highlightColor = HIGHLIGHT_COLOR;\n      }\n      await context.sync();\n      errors[0].range.select();\n    });\n  } catch (e) {\n    console.error(\"checkDocumentText failed:\", e);\n    showNotification(\"checkError\", {\n      type: \"errorMessage\",\n      message: \"Preposition check failed. Please try again.\",\n      persistent: false\n    });\n  } finally {\n    state.isChecking = false;\n  }\n}\n\n// Accept/reject functions\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n      err.range.font.highlightColor = null;\n      await context.sync();\n\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (e) {\n    console.error(\"acceptCurrentChange failed:\", e);\n    showNotification(\"acceptError\", {\n      type: \"errorMessage\",\n      message: \"Failed to apply change. Please re-run the check.\",\n      persistent: false\n    });\n  }\n}\n\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.font.highlightColor = null;\n      await context.sync();\n\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (e) {\n    console.error(\"rejectCurrentChange failed:\", e);\n    showNotification(\"rejectError\", {\n      type: \"errorMessage\",\n      message: \"Failed to reject change. Please re-run the check.\",\n      persistent: false\n    });\n  }\n}\n\nasync function acceptAllChanges() {\n  if (!state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (e) {\n    console.error(\"acceptAllChanges failed:\", e);\n    showNotification(\"acceptAllError\", {\n      type: \"errorMessage\",\n      message: \"Failed to apply all changes. Please try again.\",\n      persistent: false\n    });\n  }\n}\n\nasync function rejectAllChanges() {\n  if (!state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (e) {\n    console.error(\"rejectAllChanges failed:\", e);\n    showNotification(\"rejectAllError\", {\n      type: \"errorMessage\",\n      message: \"Failed to clear changes. Please try again.\",\n      persistent: false\n    });\n  }\n}\n\n// Expose to ribbon/UI (these are just the callbacks Office.actions.invokeFunction will call)\nwindow.checkDocumentText    = checkDocumentText;\nwindow.acceptCurrentChange  = acceptCurrentChange;\nwindow.rejectCurrentChange  = rejectCurrentChange;\nwindow.acceptAllChanges     = acceptAllChanges;\nwindow.rejectAllChanges     = rejectAllChanges;\n"],"names":["showNotification","id","options","Office","NotificationMessages","addAsync","window","_SZ_functionsRegistered","onReady","info","host","HostType","Word","actions","associate","checkDocumentText","acceptAllChanges","rejectAllChanges","acceptCurrentChange","rejectCurrentChange","error","console","type","message","persistent","state","errors","currentIndex","isChecking","HIGHLIGHT_COLOR","NOTIF_ID","determineCorrectPreposition","rawWord","match","normalize","firstChar","toLowerCase","unvoiced","Set","test","has","async","deleteAsync","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","allRanges","addSearchResults","scope","res","search","load","context","sync","push","items","document","body","secs","sections","s","getHeader","getFooter","ccs","contentControls","cc","tables","t","getRange","candidates","filter","r","includes","text","trim","prep","after","expandTo","TextRangeUnit","word","nextWord","curr","corr","suggestion","length","select","icon","err","insertText","InsertLocation","replace"],"sourceRoot":""}