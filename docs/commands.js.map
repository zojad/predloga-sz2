{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Show or clear ribbon notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n// Decide “s” vs “z” from the first letter of the next word\r\nfunction determineCorrectPreposition(word) {\r\n  if (!word) return null;\r\n  const m = word.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return voiceless.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: highlight all mismatches & select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    // Clear any previous highlights\r\n    const prevS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const prevZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    prevS.load(\"items\"); prevZ.load(\"items\");\r\n    await context.sync();\r\n    [...prevS.items, ...prevZ.items].forEach(r => r.font.highlightColor = null);\r\n    await context.sync();\r\n\r\n    // Find all standalone s/z\r\n    const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    const mismatches = [];\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const txt = r.text.trim().toLowerCase();\r\n      if (txt !== \"s\" && txt !== \"z\") continue;\r\n\r\n      // Grab the very next word\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nextWord = after.text.trim();\r\n      if (!nextWord) continue;\r\n\r\n      const expected = determineCorrectPreposition(nextWord);\r\n      if (expected && txt !== expected) {\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        mismatches.push(r);\r\n      }\r\n    }\r\n\r\n    if (!mismatches.length) {\r\n      showNotification(NOTIF_ID, {\r\n        type: \"informationalMessage\",\r\n        message: \"✨ No mismatches!\",\r\n        icon: \"Icon.80x80\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Select the first mismatch\r\n    const first = mismatches[0];\r\n    first.select();\r\n    await context.sync();\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace current mismatch & go to next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  await Word.run(async context => {\r\n    const sel = context.document.getSelection();\r\n    sel.load(\"text\");\r\n    await context.sync();\r\n\r\n    const actual = sel.text.trim().toLowerCase();\r\n    if (actual !== \"s\" && actual !== \"z\") {\r\n      // nothing to accept here\r\n      return;\r\n    }\r\n\r\n    // Figure out the replacement\r\n    const after = sel.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n    after.load(\"text\");\r\n    await context.sync();\r\n    const nextWord = after.text.trim();\r\n    const expected = determineCorrectPreposition(nextWord);\r\n    if (expected && expected !== actual) {\r\n      sel.insertText(expected, Word.InsertLocation.replace);\r\n      sel.font.highlightColor = null;\r\n      await context.sync();\r\n    }\r\n\r\n    // Now find the next mismatch after this spot\r\n    const afterSel = sel.getRange(\"After\");\r\n    const ns = afterSel.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const nz = afterSel.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    ns.load(\"items\"); nz.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...ns.items, ...nz.items]) {\r\n      const t = r.text.trim().toLowerCase();\r\n      if (t !== \"s\" && t !== \"z\") continue;\r\n      const a2 = r.getRange(\"After\").getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      a2.load(\"text\");\r\n      await context.sync();\r\n      const nw = a2.text.trim();\r\n      const exp2 = determineCorrectPreposition(nw);\r\n      if (exp2 && exp2 !== t) {\r\n        r.select();\r\n        await context.sync();\r\n        return;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear current highlight & go to next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  await Word.run(async context => {\r\n    const sel = context.document.getSelection();\r\n    sel.font.highlightColor = null;\r\n    await context.sync();\r\n\r\n    // Find next mismatch just like in Accept One\r\n    const afterSel = sel.getRange(\"After\");\r\n    const ns = afterSel.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const nz = afterSel.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    ns.load(\"items\"); nz.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...ns.items, ...nz.items]) {\r\n      const t = r.text.trim().toLowerCase();\r\n      if (t !== \"s\" && t !== \"z\") continue;\r\n      const a2 = r.getRange(\"After\").getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      a2.load(\"text\");\r\n      await context.sync();\r\n      const nw = a2.text.trim();\r\n      const exp2 = determineCorrectPreposition(nw);\r\n      if (exp2 && exp2 !== t) {\r\n        r.select();\r\n        await context.sync();\r\n        return;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: bulk replace everywhere\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    const all = [...sRes.items, ...zRes.items]\r\n      .filter(r => ['s','z'].includes(r.text.trim().toLowerCase()));\r\n\r\n    for (const r of all) {\r\n      const actual = r.text.trim().toLowerCase();\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nextWord = after.text.trim();\r\n      const expected = determineCorrectPreposition(nextWord);\r\n      if (expected && expected !== actual) {\r\n        r.insertText(expected, Word.InsertLocation.replace);\r\n        r.font.highlightColor = null;\r\n        await context.sync();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: clear all highlights\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    const all = [...sRes.items, ...zRes.items];\r\n    all.forEach(r => r.font.highlightColor = null);\r\n    await context.sync();\r\n  });\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    Office.actions.associate(\"checkDocumentText\",   (...args) => {\n      console.log(\"▶️ OfficeAction invoked: checkDocumentText\", args);\n      return checkDocumentText(...args);\n    });\n\n    Office.actions.associate(\"acceptCurrentChange\", (...args) => {\n      console.log(\"▶️ OfficeAction invoked: acceptCurrentChange\", args);\n      return acceptCurrentChange(...args);\n    });\n\n    Office.actions.associate(\"rejectCurrentChange\", (...args) => {\n      console.log(\"▶️ OfficeAction invoked: rejectCurrentChange\", args);\n      return rejectCurrentChange(...args);\n    });\n\n    Office.actions.associate(\"acceptAllChanges\",    (...args) => {\n      console.log(\"▶️ OfficeAction invoked: acceptAllChanges\", args);\n      return acceptAllChanges(...args);\n    });\n\n    Office.actions.associate(\"rejectAllChanges\",    (...args) => {\n      console.log(\"▶️ OfficeAction invoked: rejectAllChanges\", args);\n      return rejectAllChanges(...args);\n    });\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["NOTIF_ID","determineCorrectPreposition","word","m","normalize","match","c","toLowerCase","voiceless","Set","key","test","has","console","log","Office","onReady","info","host","HostType","Word","actions","associate","_len","arguments","length","args","Array","_key","async","id","NotificationMessages","deleteAsync","run","prevS","context","document","body","search","matchWholeWord","matchCase","prevZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","mismatches","txt","text","trim","after","getRange","getNextTextRange","nextWord","expected","push","select","addAsync","type","message","icon","showNotification","checkDocumentText","_len2","_key2","sel","getSelection","actual","insertText","InsertLocation","replace","afterSel","ns","nz","t","a2","exp2","acceptCurrentChange","_len3","_key3","rejectCurrentChange","_len4","_key4","opts","all","filter","includes","acceptAllChanges","_len5","_key5","rejectAllChanges"],"sourceRoot":""}