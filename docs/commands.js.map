{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\nconst state = {\n  errors: [],\n  currentIndex: 0,\n};\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    try {\n      Office.actions.associate(\"checkDocumentText\", checkDocumentText);\n      Office.actions.associate(\"acceptAllChanges\", acceptAllChanges);\n      Office.actions.associate(\"rejectAllChanges\", rejectAllChanges);\n      Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n      Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    } catch (error) {\n      console.error(\"Function registration failed:\", error);\n    }\n  }\n});\n\nfunction determineCorrectPreposition(word) {\n  if (!word) return null;\n\n  const unvoicedConsonants = new Set(['c', 'č', 'f', 'h', 'k', 'p', 's', 'š', 't']);\n  const numberPronunciations = {\n    '1': 'e', '2': 'd', '3': 't', '4': 'š', '5': 'p',\n    '6': 'š', '7': 's', '8': 'o', '9': 'd', '0': 'n'\n  };\n\n  let firstChar = \"\";\n  for (const char of word) {\n    if (char.match(/[a-zA-ZčČšŠžŽ0-9]/)) {\n      firstChar = char.toLowerCase();\n      break;\n    }\n  }\n\n  if (!firstChar) return null;\n\n  if (firstChar >= '0' && firstChar <= '9') {\n    const pronunciation = numberPronunciations[firstChar];\n    return unvoicedConsonants.has(pronunciation) ? \"s\" : \"z\";\n  }\n\n  return unvoicedConsonants.has(firstChar) ? \"s\" : \"z\";\n}\n\nasync function checkDocumentText() {\n  try {\n    await Word.run(async (context) => {\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = null;\n      });\n      state.errors = [];\n      state.currentIndex = 0;\n\n      const searchOptions = { matchCase: false, matchWholeWord: true };\n      const sResults = context.document.body.search(\"s\", searchOptions);\n      const zResults = context.document.body.search(\"z\", searchOptions);\n      sResults.load(\"items\");\n      zResults.load(\"items\");\n      await context.sync();\n\n      const results = [...sResults.items, ...zResults.items];\n      if (results.length === 0) {\n        console.log(\"No 's' or 'z' prepositions found.\");\n      }\n\n      const errors = results\n        .filter(prep => ['s', 'z'].includes(prep.text.trim().toLowerCase()))\n        .map(prep => {\n          try {\n            return {\n              prepositionRange: prep,\n              nextWordRange: prep.getNextTextRange(Word.TextRangeUnit.word)\n            };\n          } catch (err) {\n            console.warn(\"Failed to get next text range for:\", prep.text);\n            return null;\n          }\n        })\n        .filter(Boolean);\n\n      errors.forEach(e => e.nextWordRange.load(\"text\"));\n      await context.sync();\n\n      state.errors = errors\n        .map(({ prepositionRange, nextWordRange }) => {\n          const currentPrep = prepositionRange.text.trim().toLowerCase();\n          const correctPrep = determineCorrectPreposition(nextWordRange.text.trim());\n          if (!correctPrep) return null;\n          return currentPrep !== correctPrep ? {\n            range: prepositionRange,\n            suggestion: correctPrep\n          } : null;\n        })\n        .filter(Boolean);\n\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = \"Yellow\";\n      });\n\n      await context.sync();\n\n      if (state.errors.length > 0) {\n        state.errors[0].range.select();\n      } else {\n        console.log(\"No preposition errors found.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Document check failed:\", error);\n  }\n}\n\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to accept change:\", error);\n  }\n}\n\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to reject change:\", error);\n  }\n}\n\nasync function acceptAllChanges() {\n  if (state.errors.length === 0) return;\n\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to accept all changes:\", error);\n  }\n}\n\nasync function rejectAllChanges() {\n  if (state.errors.length === 0) return;\n\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to reject all changes:\", error);\n  }\n}\n\nwindow.checkDocumentText = checkDocumentText;\nwindow.acceptAllChanges = acceptAllChanges;\nwindow.rejectAllChanges = rejectAllChanges;\nwindow.acceptCurrentChange = acceptCurrentChange;\nwindow.rejectCurrentChange = rejectCurrentChange;\n\n"],"names":["state","errors","currentIndex","async","checkDocumentText","Word","run","forEach","err","range","font","highlightColor","searchOptions","matchCase","matchWholeWord","sResults","context","document","body","search","zResults","load","sync","results","items","length","console","log","filter","prep","includes","text","trim","toLowerCase","map","prepositionRange","nextWordRange","getNextTextRange","TextRangeUnit","word","warn","Boolean","e","_ref","currentPrep","correctPrep","unvoicedConsonants","Set","numberPronunciations","firstChar","char","match","pronunciation","has","determineCorrectPreposition","suggestion","select","error","acceptCurrentChange","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","Office","onReady","info","host","HostType","actions","associate","window"],"sourceRoot":""}