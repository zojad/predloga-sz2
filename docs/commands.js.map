{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\n// State for errors and control flow\nconst state = {\n  errors: [],\n  currentIndex: 0,\n  isChecking: false\n};\n\n// Highlight color for detected errors: light pink\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\nconst NOTIF_ID = \"noErrors\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    try {\n      Office.actions.associate(\"checkDocumentText\", checkDocumentText);\n      Office.actions.associate(\"acceptAllChanges\", acceptAllChanges);\n      Office.actions.associate(\"rejectAllChanges\", rejectAllChanges);\n      Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n      Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    } catch (error) {\n      console.error(\"Function registration failed:\", error);\n      Office.NotificationMessages.addAsync(\"regError\", {\n        type: \"errorMessage\",\n        message: \"Add-in initialization failed. Please reload.\",\n        persistent: false\n      });\n    }\n  }\n});\n\n// Map a raw word (letter or digit start) to the correct 's' or 'z'\nfunction determineCorrectPreposition(rawWord) {\n  if (!rawWord) return null;\n  // Normalize to NFC so É vs É are consistent\n  const word = rawWord.normalize(\"NFC\");\n  // Find first letter or digit via Unicode property escape\n  const match = word.match(/[\\p{L}0-9]/u);\n  if (!match) return null;\n  const firstChar = match[0].toLowerCase();\n\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\n  const numPron = {\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\n  };\n\n  if (/\\d/.test(firstChar)) {\n    const pron = numPron[firstChar];\n    return unvoiced.has(pron) ? \"s\" : \"z\";\n  }\n  return unvoiced.has(firstChar) ? \"s\" : \"z\";\n}\n\n// Main scan: highlight mismatches, or notify if none\nasync function checkDocumentText() {\n  if (state.isChecking) return;\n  state.isChecking = true;\n  Office.NotificationMessages.deleteAsync(NOTIF_ID);\n\n  try {\n    await Word.run(async (context) => {\n      // Clear previous highlights\n      state.errors.forEach(e => e.range.font.highlightColor = null);\n      state.errors = [];\n      state.currentIndex = 0;\n\n      const searchOptions = { matchCase: false, matchWholeWord: true };\n      let allRanges = [];\n\n      // helper: find standalone 's' or 'z'\n      async function addSearchResults(scope) {\n        const res = scope.search(\"\\\\b[sz]\\\\b\", searchOptions);\n        res.load(\"items\");\n        await context.sync();\n        allRanges.push(...res.items);\n      }\n\n      // Body, headers, footers, content controls, tables\n      await addSearchResults(context.document.body);\n      const secs = context.document.sections;\n      secs.load(\"items\"); await context.sync();\n      for (const s of secs.items) {\n        await addSearchResults(s.getHeader(\"Primary\"));\n        await addSearchResults(s.getFooter(\"Primary\"));\n      }\n      const ccs = context.document.contentControls;\n      ccs.load(\"items\"); await context.sync();\n      for (const cc of ccs.items) await addSearchResults(cc);\n      const tables = context.document.body.tables;\n      tables.load(\"items\"); await context.sync();\n      for (const t of tables.items) await addSearchResults(t.getRange());\n\n      // Filter exactly “s”/“z”\n      const candidates = allRanges.filter(r =>\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\n      );\n\n      const errors = [];\n      for (const prep of candidates) {\n        const after = prep.getRange(\"After\");\n        after.expandTo(Word.TextRangeUnit.word);\n        after.load(\"text\");\n        await context.sync();\n\n        const nextWord = after.text.trim();\n        if (!nextWord) continue;\n\n        const curr = prep.text.trim().toLowerCase();\n        const corr = determineCorrectPreposition(nextWord);\n        if (corr && curr !== corr) errors.push({range: prep, suggestion: corr});\n      }\n\n      state.errors = errors;\n      if (errors.length === 0) {\n        Office.NotificationMessages.addAsync(NOTIF_ID, {\n          type: \"informationalMessage\",\n          message: \"🎉 No mismatched ‘s’/‘z’ prepositions found.\",\n          icon: \"Icon.80x80\",\n          persistent: false\n        });\n        return;\n      }\n\n      // Highlight our errors and select the first\n      for (const e of errors) e.range.font.highlightColor = HIGHLIGHT_COLOR;\n      await context.sync();\n      errors[0].range.select();\n    });\n  } catch (e) {\n    console.error(\"checkDocumentText failed:\", e);\n    Office.NotificationMessages.addAsync(\"checkError\", {\n      type: \"errorMessage\",\n      message: \"Preposition check failed. Please try again.\",\n      persistent: false\n    });\n  } finally {\n    state.isChecking = false;\n  }\n}\n\n// Accept/reject functions\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      try {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      } catch {\n        await checkDocumentText(); // resync\n        return;\n      }\n      await context.sync();\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (e) {\n    console.error(\"acceptCurrentChange failed:\", e);\n    Office.NotificationMessages.addAsync(\"acceptError\", {\n      type: \"errorMessage\",\n      message: \"Failed to apply change. Please re-run the check.\",\n      persistent: false\n    });\n  }\n}\n\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (e) {\n    console.error(\"rejectCurrentChange failed:\", e);\n    Office.NotificationMessages.addAsync(\"rejectError\", {\n      type: \"errorMessage\",\n      message: \"Failed to reject change. Please re-run the check.\",\n      persistent: false\n    });\n  }\n}\n\nasync function acceptAllChanges() {\n  if (!state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (e) {\n    console.error(\"acceptAllChanges failed:\", e);\n    Office.NotificationMessages.addAsync(\"acceptAllError\", {\n      type: \"errorMessage\",\n      message: \"Failed to apply all changes. Please try again.\",\n      persistent: false\n    });\n  }\n}\n\nasync function rejectAllChanges() {\n  if (!state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (e) {\n    console.error(\"rejectAllChanges failed:\", e);\n    Office.NotificationMessages.addAsync(\"rejectAllError\", {\n      type: \"errorMessage\",\n      message: \"Failed to clear changes. Please try again.\",\n      persistent: false\n    });\n  }\n}\n\n// Expose to ribbon/UI\nwindow.checkDocumentText   = checkDocumentText;\nwindow.acceptCurrentChange = acceptCurrentChange;\nwindow.rejectCurrentChange = rejectCurrentChange;\nwindow.acceptAllChanges    = acceptAllChanges;\nwindow.rejectAllChanges    = rejectAllChanges;\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","determineCorrectPreposition","rawWord","match","normalize","firstChar","toLowerCase","unvoiced","Set","numPron","test","pron","has","async","checkDocumentText","Office","NotificationMessages","deleteAsync","Word","run","forEach","e","range","font","highlightColor","searchOptions","matchCase","matchWholeWord","allRanges","addSearchResults","scope","res","search","load","context","sync","push","items","document","body","secs","sections","s","getHeader","getFooter","ccs","contentControls","cc","tables","t","getRange","candidates","filter","r","includes","text","trim","prep","after","expandTo","TextRangeUnit","word","nextWord","curr","corr","suggestion","length","select","addAsync","type","message","icon","persistent","console","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate","window"],"sourceRoot":""}