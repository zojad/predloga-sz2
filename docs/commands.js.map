{"version":3,"file":"commands.js","mappings":"yBAGAA,QAAQC,IAAI,2BAEZ,IAAIC,EAAQ,CACVC,OAAQ,GACRC,aAAc,EACdC,YAAY,GAGd,MACMC,EAAkB,WAYxB,SAASC,EAAiBC,EAAIC,GAE1BC,OAAOC,sBACyC,mBAAzCD,OAAOC,qBAAqBC,UAEnCF,OAAOC,qBAAqBC,SAASJ,EAAIC,EAE7C,CAGA,SAASI,EAA4BC,GACnC,IAAKA,EAAS,OAAO,KACrB,MACMC,EADOD,EAAQE,UAAU,OACZD,MAAM,eACzB,IAAKA,EAAO,OAAO,KACnB,MAAME,EAAQF,EAAM,GAAGG,cAEjBC,EAAW,IAAIC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAM1D,MAAI,KAAKC,KAAKJ,GACLE,EAASG,IAND,CACf,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IACpC,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,KAITL,IAAU,IAAM,IAEtCE,EAASG,IAAIL,GAAS,IAAM,GACrC,CAGOM,eAAeC,IAEpB,GADAxB,QAAQC,IAAI,wBAAyBC,IACjCA,EAAMG,WAAV,CAzCF,IAA2BG,EA0CzBN,EAAMG,YAAa,EA1CMG,EA2CPF,EAzChBI,OAAOC,sBAC4C,mBAA5CD,OAAOC,qBAAqBc,aAEnCf,OAAOC,qBAAqBc,YAAYjB,GAwC1C,UACQkB,KAAKC,KAAIJ,UACbvB,QAAQC,IAAI,oBAGZC,EAAMC,OAAOyB,SAAQC,GAAKA,EAAEC,MAAMC,KAAKC,eAAiB,OACxD9B,EAAMC,OAAS,GACfD,EAAME,aAAe,EAGrB,MACM6B,EAAUC,EAAQC,SAASC,KAAKC,OAAO,aADhC,CAAEC,WAAW,EAAOC,gBAAgB,IAEjDN,EAAQO,KAAK,eACPN,EAAQO,OAEdzC,QAAQC,IAAI,uBAAwBgC,EAAQS,MAAMC,QAGlD,MAAMC,EAAaX,EAAQS,MAAMG,QAAOC,GACtC,CAAC,IAAI,KAAKC,SAASD,EAAEE,KAAKC,OAAO/B,iBAEnClB,QAAQC,IAAI,yBAA0B2C,EAAWD,QAEjD,IAAIxC,EAAS,GACb,IAAK,IAAI+C,KAAQN,EAAY,CAE3B,MAAMO,EAAQD,EAAKE,SAAS1B,KAAK2B,cAAcC,OAG/CH,EAAMI,SAAS7B,KAAK8B,cAAc9B,MAClCyB,EAAMX,KAAK,cACLN,EAAQO,OAEd,MAAMgB,EAAWN,EAAMH,KAAKC,OAC5B,IAAKQ,EAAU,SAEf,MAAMC,EAASR,EAAKF,KAAKC,OAAO/B,cAC1ByC,EAAS9C,EAA4B4C,GACvCE,GAAUD,IAAWC,GACvBxD,EAAOyD,KAAK,CAAE9B,MAAOoB,EAAMW,WAAYF,GAE3C,CAEAzD,EAAMC,OAASA,EACfH,QAAQC,IAAI,sBAAuBE,GAE9BA,EAAOwC,QAUVxC,EAAOyB,SAAQC,GAAKA,EAAEC,MAAMC,KAAKC,eAzGjB,kBA0GVE,EAAQO,OACdtC,EAAO,GAAG2B,MAAMgC,WAXhB9D,QAAQC,IAAI,mBACZM,EAAiBD,EAAU,CACzByD,KAAM,uBACNC,QAAS,4BACTC,KAAM,aACNC,YAAY,IAOhB,GAEJ,CAAE,MAAOrC,GACP7B,QAAQmE,MAAM,0BAA2BtC,GACzCtB,EAAiB,aAAc,CAC7BwD,KAAM,eACNC,QAAS,kCACTE,YAAY,GAEhB,CAAE,QACAhE,EAAMG,YAAa,CACrB,CA1E4B,CA2E9B,CAEOkB,eAAe6C,IAEpB,GADApE,QAAQC,IAAI,6BACRC,EAAME,cAAgBF,EAAMC,OAAOwC,QAEvC,UACQjB,KAAKC,KAAIJ,UACb,MAAM8C,EAAMnE,EAAMC,OAAOD,EAAME,cAC/BiE,EAAIvC,MAAMwC,WAAWD,EAAIR,WAAYnC,KAAK6C,eAAeC,SACzDH,EAAIvC,MAAMC,KAAKC,eAAiB,WAC1BE,EAAQO,OAEdvC,EAAME,eACFF,EAAME,aAAeF,EAAMC,OAAOwC,QACpCzC,EAAMC,OAAOD,EAAME,cAAc0B,MAAMgC,QACzC,GAEJ,CAAE,MAAOjC,GACP7B,QAAQmE,MAAM,4BAA6BtC,GAC3CtB,EAAiB,cAAe,CAC9BwD,KAAM,eACNC,QAAS,mDACTE,YAAY,GAEhB,CACF,CAEO3C,eAAekD,IAEpB,GADAzE,QAAQC,IAAI,6BACRC,EAAME,cAAgBF,EAAMC,OAAOwC,QAEvC,UACQjB,KAAKC,KAAIJ,UACDrB,EAAMC,OAAOD,EAAME,cAC3B0B,MAAMC,KAAKC,eAAiB,WAC1BE,EAAQO,OAEdvC,EAAME,eACFF,EAAME,aAAeF,EAAMC,OAAOwC,QACpCzC,EAAMC,OAAOD,EAAME,cAAc0B,MAAMgC,QACzC,GAEJ,CAAE,MAAOjC,GACP7B,QAAQmE,MAAM,4BAA6BtC,GAC3CtB,EAAiB,cAAe,CAC9BwD,KAAM,eACNC,QAAS,oDACTE,YAAY,GAEhB,CACF,CAEO3C,eAAemD,IAEpB,GADA1E,QAAQC,IAAI,wBACPC,EAAMC,OAAOwC,OAElB,UACQjB,KAAKC,KAAIJ,UACb,IAAK,MAAM8C,KAAOnE,EAAMC,OACtBkE,EAAIvC,MAAMwC,WAAWD,EAAIR,WAAYnC,KAAK6C,eAAeC,SACzDH,EAAIvC,MAAMC,KAAKC,eAAiB,WAE5BE,EAAQO,OACdvC,EAAMC,OAAS,EAAE,GAErB,CAAE,MAAO0B,GACP7B,QAAQmE,MAAM,yBAA0BtC,GACxCtB,EAAiB,iBAAkB,CACjCwD,KAAM,eACNC,QAAS,iDACTE,YAAY,GAEhB,CACF,CAEO3C,eAAeoD,IAEpB,GADA3E,QAAQC,IAAI,wBACPC,EAAMC,OAAOwC,OAElB,UACQjB,KAAKC,KAAIJ,UACbrB,EAAMC,OAAOyB,SAAQC,GAAKA,EAAEC,MAAMC,KAAKC,eAAiB,aAClDE,EAAQO,OACdvC,EAAMC,OAAS,EAAE,GAErB,CAAE,MAAO0B,GACP7B,QAAQmE,MAAM,yBAA0BtC,GACxCtB,EAAiB,iBAAkB,CACjCwD,KAAM,eACNC,QAAS,6CACTE,YAAY,GAEhB,CACF,CCvNAlE,QAAQC,IAAI,wBAEZS,OAAOkE,SAAQC,IACb7E,QAAQC,IAAI,oBAAqB4E,GAE7BA,EAAKC,OAASpE,OAAOqE,SAASrD,OAChC1B,QAAQC,IAAI,2BACZS,OAAOsE,QAAQC,UAAU,oBAAuBzD,GAChDd,OAAOsE,QAAQC,UAAU,sBAAuBb,GAChD1D,OAAOsE,QAAQC,UAAU,sBAAuBR,GAChD/D,OAAOsE,QAAQC,UAAU,mBAAuBP,GAChDhE,OAAOsE,QAAQC,UAAU,mBAAuBN,GAChD3E,QAAQC,IAAI,wBACd,G","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// log on load\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (\r\n    Office.NotificationMessages &&\r\n    typeof Office.NotificationMessages.deleteAsync === \"function\"\r\n  ) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (\r\n    Office.NotificationMessages &&\r\n    typeof Office.NotificationMessages.addAsync === \"function\"\r\n  ) {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Commands ––//\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run start\");\r\n\r\n      // clear previous\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // find lone “s” or “z”\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const results = context.document.body.search(\"\\\\b[sz]\\\\b\", opts);\r\n      results.load(\"items\");\r\n      await context.sync();\r\n\r\n      console.log(\"→ raw wildcard hits:\", results.items.length);\r\n\r\n      // filter exact text\r\n      const candidates = results.items.filter(r =>\r\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\r\n      );\r\n      console.log(\"→ filtered candidates:\", candidates.length);\r\n\r\n      let errors = [];\r\n      for (let prep of candidates) {\r\n        // ► FIX #1: use PascalCase enum member\r\n        const after = prep.getRange(Word.RangeLocation.After);\r\n\r\n        // ► FIX #2: PascalCase here too\r\n        after.expandTo(Word.TextRangeUnit.Word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ mismatches found:\", errors);\r\n\r\n      if (!errors.length) {\r\n        console.log(\"→ no mismatches\");\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        // highlight + select first\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange()\");\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange()\");\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges()\");\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges()\");\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n    Office.actions.associate(\"checkDocumentText\",   checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\",    acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\",    rejectAllChanges);\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","results","context","document","body","search","matchCase","matchWholeWord","load","sync","items","length","candidates","filter","r","includes","text","trim","prep","after","getRange","RangeLocation","After","expandTo","TextRangeUnit","nextWord","actual","expect","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate"],"sourceRoot":""}