{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst state = {\r\n  errors: [],        // [{ range: Word.Range, suggestion: \"s\"|\"z\" }, …]\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n// Pure-JS: decide whether the next word wants \"s\" or \"z\"\r\nfunction determineCorrectPreposition(word) {\r\n  if (!word) return null;\r\n  const m = word.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return voiceless.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ───────────────────────────────────────\r\n// 1) Highlight all mismatches & select first\r\n// ───────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  await Word.run(async context => {\r\n    // 1. clear old highlights\r\n    context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false })\r\n      .load(\"items\");\r\n    context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false })\r\n      .load(\"items\");\r\n    await context.sync();\r\n    // Actually clear them:\r\n    const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false }).items;\r\n    const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false }).items;\r\n    [...oldS, ...oldZ].forEach(r => r.font.highlightColor = null);\r\n    await context.sync();\r\n\r\n    // 2. find fresh candidates\r\n    const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    const candidates = [...sRes.items, ...zRes.items]\r\n      .filter(r => {\r\n        const t = r.text.trim().toLowerCase();\r\n        return t === \"s\" || t === \"z\";\r\n      });\r\n\r\n    // 3. for each candidate, grab the next word and compare\r\n    for (const r of candidates) {\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange(\r\n                       [\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"],\r\n                       /*trimSpacing=*/ true\r\n                     );\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const actual   = r.text.trim().toLowerCase();\r\n      const expected = determineCorrectPreposition(nxt);\r\n      if (expected && actual !== expected) {\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion: expected });\r\n      }\r\n    }\r\n\r\n    if (!state.errors.length) {\r\n      showNotification(NOTIF_ID, {\r\n        type: \"informationalMessage\",\r\n        message: \"✨ No mismatches!\",\r\n        icon: \"Icon.80x80\"\r\n      });\r\n    } else {\r\n      // select the first mismatch\r\n      const first = state.errors[0].range;\r\n      context.trackedObjects.add(first);\r\n      first.select();\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ───────────────────────────────────────\r\n// 2) Accept One → replace & jump to next\r\n// ───────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // Pull off the head of the queue:\r\n  const { suggestion } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    // We're already sitting on that letter (from checkDocumentText)\r\n    const sel = context.document.getSelection();\r\n    sel.insertText(suggestion, Word.InsertLocation.replace);\r\n    sel.font.highlightColor = null;\r\n\r\n    // Now if anything remains, select the next mismatch\r\n    if (state.errors.length) {\r\n      const next = state.errors[0].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\n// ───────────────────────────────────────\r\n// 3) Reject One → clear highlight & jump\r\n// ───────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // Just remove this one from the queue\r\n  state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    const sel = context.document.getSelection();\r\n    sel.font.highlightColor = null;\r\n\r\n    if (state.errors.length) {\r\n      const next = state.errors[0].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\n// ───────────────────────────────────────\r\n// 4) Accept All → fix ‘em all in one go\r\n// ───────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    // Load each range's text so we know what to replace\r\n    for (const e of state.errors) {\r\n      context.load(e.range, \"text\");\r\n    }\r\n    await context.sync();\r\n\r\n    // Replace & clear\r\n    for (const { range, suggestion } of state.errors) {\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ───────────────────────────────────────\r\n// 5) Reject All → clear all highlights\r\n// ───────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const e of state.errors) {\r\n      e.range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    Office.actions.associate(\"checkDocumentText\",   (...args) => {\n      console.log(\"▶️ OfficeAction invoked: checkDocumentText\", args);\n      return checkDocumentText(...args);\n    });\n\n    Office.actions.associate(\"acceptCurrentChange\", (...args) => {\n      console.log(\"▶️ OfficeAction invoked: acceptCurrentChange\", args);\n      return acceptCurrentChange(...args);\n    });\n\n    Office.actions.associate(\"rejectCurrentChange\", (...args) => {\n      console.log(\"▶️ OfficeAction invoked: rejectCurrentChange\", args);\n      return rejectCurrentChange(...args);\n    });\n\n    Office.actions.associate(\"acceptAllChanges\",    (...args) => {\n      console.log(\"▶️ OfficeAction invoked: acceptAllChanges\", args);\n      return acceptAllChanges(...args);\n    });\n\n    Office.actions.associate(\"rejectAllChanges\",    (...args) => {\n      console.log(\"▶️ OfficeAction invoked: rejectAllChanges\", args);\n      return rejectAllChanges(...args);\n    });\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["state","errors","NOTIF_ID","showNotification","id","opts","Office","NotificationMessages","addAsync","determineCorrectPreposition","word","m","normalize","match","c","toLowerCase","voiceless","Set","key","test","has","console","log","onReady","info","host","HostType","Word","actions","associate","_len","arguments","length","args","Array","_key","async","deleteAsync","run","context","document","body","search","matchWholeWord","matchCase","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","candidates","filter","t","text","trim","after","getRange","getNextTextRange","nxt","actual","expected","trackedObjects","add","push","range","suggestion","first","select","type","message","icon","checkDocumentText","_len2","_key2","shift","sel","getSelection","insertText","InsertLocation","replace","next","acceptCurrentChange","_len3","_key3","rejectCurrentChange","_len4","_key4","e","acceptAllChanges","_len5","_key5","rejectAllChanges"],"sourceRoot":""}