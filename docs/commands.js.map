{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }[]\r\n  currentIndex: 0\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// — Helpers for ribbon notifications —\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide “s” vs “z” from the first letter of the next word.\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: highlight *all* mismatches & select the first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  // reset our queue & UI\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // 1) clear any old highlights\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // 2) find every standalone “s” or “z”\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // 3) evaluate each candidate\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expected = determineCorrectPreposition(nxt);\r\n        if (!expected || expected === raw.toLowerCase()) continue;\r\n\r\n        // preserve case\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expected.toUpperCase()\r\n          : expected;\r\n\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      // 4) no mismatches → notification, else select the first\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select(Word.SelectionMode.select);\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace & clear current, then select next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    const { range, suggestion } = state.errors[state.currentIndex];\r\n    context.trackedObjects.add(range);\r\n\r\n    // replace text + clear its highlight\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n\r\n    // advance index\r\n    state.currentIndex++;\r\n\r\n    // if more remain, select the next one\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select(Word.SelectionMode.select);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear highlight on current, then select next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    const { range } = state.errors[state.currentIndex];\r\n    context.trackedObjects.add(range);\r\n\r\n    // clear highlight only\r\n    range.font.highlightColor = null;\r\n\r\n    // advance index\r\n    state.currentIndex++;\r\n\r\n    // select next if present\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select(Word.SelectionMode.select);\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: batch‐replace & clear every mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: batch‐clear every highlight\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // — Check S/Z —\n    Office.actions.associate(\"checkDocumentText\", async (event) => {\n      console.log(\"▶️ checkDocumentText\");\n      await checkDocumentText();\n      event.completed();               // ← tell Word we’re done\n    });\n\n    // — Accept One —\n    Office.actions.associate(\"acceptCurrentChange\", async (event) => {\n      console.log(\"▶️ acceptCurrentChange\");\n      await acceptCurrentChange();\n      event.completed();\n    });\n\n    // — Reject One —\n    Office.actions.associate(\"rejectCurrentChange\", async (event) => {\n      console.log(\"▶️ rejectCurrentChange\");\n      await rejectCurrentChange();\n      event.completed();\n    });\n\n    // — Accept All —\n    Office.actions.associate(\"acceptAllChanges\", async (event) => {\n      console.log(\"▶️ acceptAllChanges\");\n      await acceptAllChanges();\n      event.completed();\n    });\n\n    // — Reject All —\n    Office.actions.associate(\"rejectAllChanges\", async (event) => {\n      console.log(\"▶️ rejectAllChanges\");\n      await rejectAllChanges();\n      event.completed();\n    });\n  }\n});\n"],"names":["state","errors","currentIndex","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","console","log","onReady","info","host","HostType","Word","actions","associate","async","run","oldS","context","document","body","search","matchWholeWord","matchCase","oldZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","after","getRange","getNextTextRange","nxt","expected","suggestion","toUpperCase","trackedObjects","add","push","range","length","first","select","SelectionMode","type","message","icon","e","error","checkDocumentText","event","completed","insertText","InsertLocation","replace","next","acceptCurrentChange","rejectCurrentChange","acceptAllChanges","rejectAllChanges"],"sourceRoot":""}