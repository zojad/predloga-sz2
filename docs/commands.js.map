{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }[]\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide between \"s\" vs \"z\":\r\n *  - next letter unvoiced ⇒ \"s\"\r\n *  - otherwise ⇒ \"z\"\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: populate state.errors, highlight all, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  // clear our error queue\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // - clear any old highlights\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // - find every standalone s or z\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // - evaluate each candidate\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        const actualLower = raw.toLowerCase();\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === actualLower) continue;\r\n\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // track + highlight + queue it\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first mismatch\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: fix the first queued item, then re-check\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // pull off the first\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  // replace + clear highlight\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-scan & auto-select the new first\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear the first queued item, then re-check\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // pull off the first\r\n  const { range } = state.errors.shift();\r\n\r\n  // clear highlight only\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-scan & auto-select the new first\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: one-shot fresh scan → replace every mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n      const actualLower = raw.toLowerCase();\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const expectedLower = determineCorrectPreposition(nxt);\r\n      if (!expectedLower || expectedLower === actualLower) continue;\r\n\r\n      const suggestion = raw === raw.toUpperCase()\r\n        ? expectedLower.toUpperCase()\r\n        : expectedLower;\r\n\r\n      r.insertText(suggestion, Word.InsertLocation.replace);\r\n      r.font.highlightColor = null;\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n\r\n  // clear the queue\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: one-shot fresh scan → clear every highlight\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n      r.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // — Check S/Z —\n    Office.actions.associate(\"checkDocumentText\", async (event) => {\n      console.log(\"▶️ checkDocumentText\");\n      await checkDocumentText();\n      event.completed();               // ← tell Word we’re done\n    });\n\n    // — Accept One —\n    Office.actions.associate(\"acceptCurrentChange\", async (event) => {\n      console.log(\"▶️ acceptCurrentChange\");\n      await acceptCurrentChange();\n      event.completed();\n    });\n\n    // — Reject One —\n    Office.actions.associate(\"rejectCurrentChange\", async (event) => {\n      console.log(\"▶️ rejectCurrentChange\");\n      await rejectCurrentChange();\n      event.completed();\n    });\n\n    // — Accept All —\n    Office.actions.associate(\"acceptAllChanges\", async (event) => {\n      console.log(\"▶️ acceptAllChanges\");\n      await acceptAllChanges();\n      event.completed();\n    });\n\n    // — Reject All —\n    Office.actions.associate(\"rejectAllChanges\", async (event) => {\n      console.log(\"▶️ rejectAllChanges\");\n      await rejectAllChanges();\n      event.completed();\n    });\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","oldS","context","document","body","search","matchWholeWord","matchCase","oldZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","actualLower","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","trackedObjects","add","push","range","length","first","select","type","message","icon","e","console","error","log","onReady","info","host","HostType","actions","associate","event","completed","shift","insertText","InsertLocation","replace","acceptCurrentChange","rejectCurrentChange","acceptAllChanges","rejectAllChanges"],"sourceRoot":""}