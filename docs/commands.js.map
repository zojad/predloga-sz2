{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// — Log immediately when the task logic bundle loads —\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic helper ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Exposed commands ––//\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"checkDocumentText()\", { errors: state.errors, isChecking: state.isChecking });\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(checkDocumentText) start\");\r\n\r\n      // Clear previous highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // Use Word wildcard search: < and > mark word boundaries,\r\n      // [sz] finds either s or z, and matchWildcards must be true.\r\n      const opts = {\r\n        matchCase:     false,\r\n        matchWildcards:true\r\n      };\r\n      let allRanges = [];\r\n\r\n      async function find(szScope) {\r\n        const r = szScope.search(\"<[sz]>\", opts);\r\n        r.load(\"items\");\r\n        await context.sync();\r\n        allRanges.push(...r.items);\r\n      }\r\n\r\n      // Search only the body for now\r\n      await find(context.document.body);\r\n\r\n      // Filter out anything that isn’t exactly \"s\" or \"z\"\r\n      const candidates = allRanges.filter(r =>\r\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\r\n      );\r\n\r\n      // For each candidate, peek at the next word and compare\r\n      let errors = [];\r\n      for (let prep of candidates) {\r\n        const after = prep.getRange(\"After\");\r\n        after.expandTo(Word.TextRangeUnit.word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ Found mismatches:\", errors);\r\n\r\n      if (!errors.length) {\r\n        console.log(\"No mismatches!\");\r\n        showNotification(NOTIF_ID, {\r\n          type:        \"informationalMessage\",\r\n          message:     \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon:        \"Icon.80x80\",\r\n          persistent:  false\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Highlight + select first\r\n      errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n      await context.sync();\r\n      errors[0].range.select();\r\n      console.log(\"→ Highlighted and selected first suggestion\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type:        \"errorMessage\",\r\n      message:     \"Check failed; please try again.\",\r\n      persistent:  false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"acceptCurrentChange()\", { currentIndex: state.currentIndex, total: state.errors.length });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ accepted one change, moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type:        \"errorMessage\",\r\n      message:     \"Failed to apply change. Please re-run the check.\",\r\n      persistent:  false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"rejectCurrentChange()\", { currentIndex: state.currentIndex });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ rejected one change, moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type:        \"errorMessage\",\r\n      message:     \"Failed to reject change. Please re-run the check.\",\r\n      persistent:  false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"acceptAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      console.log(\"→ accepted all changes\");\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type:        \"errorMessage\",\r\n      message:     \"Failed to apply all changes. Please try again.\",\r\n      persistent:  false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"rejectAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      console.log(\"→ rejected all changes\");\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type:        \"errorMessage\",\r\n      message:     \"Failed to clear changes. Please try again.\",\r\n      persistent:  false\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n    Office.actions.associate(\"checkDocumentText\",   checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\",    acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\",    rejectAllChanges);\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWildcards","allRanges","szScope","r","search","load","context","sync","push","items","find","document","body","candidates","filter","includes","text","trim","prep","after","getRange","expandTo","TextRangeUnit","word","nextWord","actual","expect","suggestion","length","type","message","icon","persistent","select","error","acceptCurrentChange","total","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate"],"sourceRoot":""}