{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  // each entry now carries its originalColor\r\n  errors: []          // Array<{ range: Word.Range, suggestion: string, originalColor: string }>\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Helpers for ribbon notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide “s” vs “z” from the first letter of rawWord.\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                     '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n/**\r\n * 1) Check S/Z:\r\n *    - first restore any old pinks back to their original colour\r\n *    - clear our queue\r\n *    - find & highlight all mismatches, remembering original colour\r\n *    - select the first one\r\n */\r\nexport async function checkDocumentText() {\r\n  // restore previous highlights\r\n  if (state.errors.length > 0) {\r\n    await Word.run(async context => {\r\n      for (const { range, originalColor } of state.errors) {\r\n        context.trackedObjects.add(range);\r\n        range.font.highlightColor = originalColor;\r\n      }\r\n      await context.sync();\r\n    });\r\n  }\r\n  // reset\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // search standalone \"s\" & \"z\"\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // examine each candidate\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        // peek at next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // compute expected\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // preserve case\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // **load & remember** the existing highlightColor\r\n        r.font.load(\"highlightColor\");\r\n        await context.sync();\r\n        const originalColor = r.font.highlightColor;\r\n\r\n        // highlight pink & enqueue\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion, originalColor });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select first mismatch\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 2) Accept One:\r\n *    - take the first queued mismatch\r\n *    - replace it, clear its pink\r\n *    - re-run checkDocumentText() to restore other highlights & re-scan\r\n */\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-scan: this will restore everyone else’s original colour\r\n  await checkDocumentText();\r\n}\r\n\r\n/**\r\n * 3) Reject One: same as Accept One but just clear the pink\r\n */\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  const { range } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  await checkDocumentText();\r\n}\r\n\r\n/**\r\n * 4) Accept All: batch-replace every mismatch in one go,\r\n *              leave all other formatting alone\r\n */\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const expectedLower = determineCorrectPreposition(nxt);\r\n      if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n      const suggestion = raw === raw.toUpperCase()\r\n        ? expectedLower.toUpperCase()\r\n        : expectedLower;\r\n\r\n      context.trackedObjects.add(r);\r\n      r.insertText(suggestion, Word.InsertLocation.replace);\r\n      r.font.highlightColor = null;\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n\r\n  // clear queue so next scan is fresh\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n/**\r\n * 5) Reject All: batch-clear every pink mismatch\r\n */\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      if (/^[sSzZ]$/.test(r.text.trim())) {\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = null;\r\n      }\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    const makeHandler = fn => async event => {\n      console.log(`▶️ ${fn.name} invoked`);\n      try {\n        await fn();\n      } catch (e) {\n        console.error(`${fn.name} threw:`, e);\n      } finally {\n        event.completed();    // ← ALWAYS tell Word you’re done\n      }\n    };\n\n    Office.actions.associate(\"checkDocumentText\",   makeHandler(checkDocumentText));\n    Office.actions.associate(\"acceptCurrentChange\", makeHandler(acceptCurrentChange));\n    Office.actions.associate(\"rejectCurrentChange\", makeHandler(rejectCurrentChange));\n    Office.actions.associate(\"acceptAllChanges\",    makeHandler(acceptAllChanges));\n    Office.actions.associate(\"rejectAllChanges\",    makeHandler(rejectAllChanges));\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["state","errors","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","length","Word","run","range","originalColor","context","trackedObjects","add","font","highlightColor","sync","matchWholeWord","matchCase","sRes","document","body","search","zRes","load","r","items","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","push","first","select","type","message","icon","e","console","error","acceptCurrentChange","shift","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","log","onReady","info","host","HostType","makeHandler","fn","name","event","completed","actions","associate"],"sourceRoot":""}