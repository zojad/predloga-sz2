{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  // Queue of { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }\r\n  errors: []\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Helpers for the little ribbon banner notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Given the *next* word, decide whether the correct preposition is\r\n * \"s\" or \"z\".  Unvoiced initials ⇒ \"s\", else \"z\".\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: reset queue, clear ALL highlights, re-scan,\r\n//    highlight mismatches & select the first one.\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // 1) Clear every old \"s\" or \"z\" highlight\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // 2) Find all standalone s/Z/z\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // 3) For each candidate, peek at the next word and decide\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        const after = r\r\n          .getRange(\"After\")\r\n          .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || raw.toLowerCase() === expectedLower) continue;\r\n\r\n        // preserve uppercase if needed\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      // 4) Either notify “no mismatches” or select the first one\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace the *first* queued mismatch, clear its highlight,\r\n//    then re-run checkDocumentText() so the *new* first is selected.\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // remove it from the queue\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // refresh highlights & selection\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear the *first* highlight, then re-scan.\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  const { range } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: apply every suggestion in the queue,\r\n//    clear highlights, then empty the queue.\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: simply clear all queued highlights,\r\n//    then empty the queue.\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // — Check S/Z —\n    Office.actions.associate(\"checkDocumentText\", async (event) => {\n      console.log(\"▶️ checkDocumentText\");\n      await checkDocumentText();\n      event.completed();               // ← tell Word we’re done\n    });\n\n    // — Accept One —\n    Office.actions.associate(\"acceptCurrentChange\", async (event) => {\n      console.log(\"▶️ acceptCurrentChange\");\n      await acceptCurrentChange();\n      event.completed();\n    });\n\n    // — Reject One —\n    Office.actions.associate(\"rejectCurrentChange\", async (event) => {\n      console.log(\"▶️ rejectCurrentChange\");\n      await rejectCurrentChange();\n      event.completed();\n    });\n\n    // — Accept All —\n    Office.actions.associate(\"acceptAllChanges\", async (event) => {\n      console.log(\"▶️ acceptAllChanges\");\n      await acceptAllChanges();\n      event.completed();\n    });\n\n    // — Reject All —\n    Office.actions.associate(\"rejectAllChanges\", async (event) => {\n      console.log(\"▶️ rejectAllChanges\");\n      await rejectAllChanges();\n      event.completed();\n    });\n  }\n});\n"],"names":["state","errors","NOTIF_ID","showNotification","id","opts","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","deleteAsync","Word","run","oldS","context","document","body","search","matchWholeWord","matchCase","oldZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","trackedObjects","add","push","range","length","first","select","type","message","icon","e","console","error","log","onReady","info","host","HostType","actions","associate","event","completed","shift","insertText","InsertLocation","replace","acceptCurrentChange","rejectCurrentChange","acceptAllChanges","rejectAllChanges"],"sourceRoot":""}