{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\nconst state = {\n  errors: [],\n  currentIndex: 0,\n};\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    Office.actions.associate(\"checkDocumentText\", checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\", acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\", rejectAllChanges);\n\n    console.log(\"Ribbon commands registered.\");\n  }\n});\n\nconst UNVOICED = new Set([\"p\", \"t\", \"k\", \"f\", \"s\", \"š\", \"c\", \"č\", \"h\"]);\nconst VOICED_OR_VOWELS = new Set([\"b\", \"d\", \"g\", \"v\", \"z\", \"ž\", \"j\", \"m\", \"n\", \"l\", \"r\", \"a\", \"e\", \"i\", \"o\", \"u\"]);\n\nfunction determineCorrectPreposition(nextWord) {\n  if (!nextWord) return null;\n  const firstChar = [...nextWord.toLowerCase()].find((c) => /[a-zčšž]/i.test(c));\n  if (!firstChar) return null;\n  return UNVOICED.has(firstChar) ? \"s\" : \"z\";\n}\n\nasync function checkDocumentText() {\n  await Word.run(async (context) => {\n    const body = context.document.body;\n    const ranges = body.getTextRanges([\" \"], true);\n    ranges.load(\"items/text\");\n    await context.sync();\n\n    for (const err of state.errors) {\n      err.range.font.highlightColor = null;\n    }\n\n    state.errors = [];\n\n    for (let i = 0; i < ranges.items.length - 1; i++) {\n      const currentText = ranges.items[i].text.trim().toLowerCase();\n      const nextWord = ranges.items[i + 1].text.trim();\n      if (currentText !== \"s\" && currentText !== \"z\") continue;\n\n      const correct = determineCorrectPreposition(nextWord);\n      if (correct && correct !== currentText) {\n        ranges.items[i].font.highlightColor = \"yellow\";\n        state.errors.push({\n          index: i,\n          range: ranges.items[i],\n          suggestion: correct,\n        });\n      }\n    }\n\n    await context.sync();\n\n    if (state.errors.length > 0) {\n      state.currentIndex = 0;\n      state.errors[0].range.select();\n    } else {\n      body.insertComment(\"No incorrect 's/z' prepositions found.\", \"start\");\n    }\n  });\n}\n\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  await Word.run(async (context) => {\n    const error = state.errors[state.currentIndex];\n    const ranges = context.document.body.getTextRanges([\" \"], true);\n    ranges.load(\"items\");\n    await context.sync();\n\n    const range = ranges.items[error.index];\n    const originalText = range.text;\n    const replacement = /^[A-ZČŠŽ]/.test(originalText)\n      ? error.suggestion.toUpperCase()\n      : error.suggestion;\n\n    range.insertText(replacement, Word.InsertLocation.replace);\n    range.font.highlightColor = null;\n\n    await context.sync();\n\n    state.errors.splice(state.currentIndex, 1);\n    if (state.currentIndex >= state.errors.length) state.currentIndex = 0;\n    if (state.errors.length > 0) state.errors[state.currentIndex].range.select();\n  });\n}\n\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n\n  await Word.run(async (context) => {\n    const error = state.errors[state.currentIndex];\n    error.range.font.highlightColor = null;\n    await context.sync();\n\n    state.errors.splice(state.currentIndex, 1);\n    if (state.currentIndex >= state.errors.length) state.currentIndex = 0;\n    if (state.errors.length > 0) state.errors[state.currentIndex].range.select();\n  });\n}\n\nasync function acceptAllChanges() {\n  if (state.errors.length === 0) return;\n\n  await Word.run(async (context) => {\n    const ranges = context.document.body.getTextRanges([\" \"], true);\n    ranges.load(\"items\");\n    await context.sync();\n\n    for (const err of state.errors) {\n      const range = ranges.items[err.index];\n      const originalText = range.text;\n      const replacement = /^[A-ZČŠŽ]/.test(originalText)\n        ? err.suggestion.toUpperCase()\n        : err.suggestion;\n\n      range.insertText(replacement, Word.InsertLocation.replace);\n      range.font.highlightColor = null;\n    }\n\n    await context.sync();\n    state.errors = [];\n  });\n}\n\nasync function rejectAllChanges() {\n  if (state.errors.length === 0) return;\n\n  await Word.run(async (context) => {\n    for (const err of state.errors) {\n      err.range.font.highlightColor = null;\n    }\n\n    await context.sync();\n    state.errors = [];\n  });\n}\n\n// Make functions available to taskpane\nwindow.checkDocumentText = checkDocumentText;\nwindow.acceptCurrentChange = acceptCurrentChange;\nwindow.rejectCurrentChange = rejectCurrentChange;\nwindow.acceptAllChanges = acceptAllChanges;\nwindow.rejectAllChanges = rejectAllChanges;\n"],"names":["state","errors","currentIndex","Office","onReady","info","host","HostType","Word","actions","associate","checkDocumentText","acceptCurrentChange","rejectCurrentChange","acceptAllChanges","rejectAllChanges","console","log","UNVOICED","Set","determineCorrectPreposition","nextWord","firstChar","toLowerCase","find","c","test","has","async","run","body","context","document","ranges","getTextRanges","load","sync","err","range","font","highlightColor","i","items","length","currentText","text","trim","correct","push","index","suggestion","select","insertComment","error","originalText","replacement","toUpperCase","insertText","InsertLocation","replace","splice","window"],"sourceRoot":""}