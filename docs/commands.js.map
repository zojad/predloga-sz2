{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Helpers for ribbon notifications\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide correct preposition for S/Z and K/H.\r\n * @param {string} nextWord    — the text of the following word\r\n * @param {string} prepLower   — the candidate preposition, already lowercased (\"s\",\"z\",\"k\" or \"h\")\r\n * @returns {\"s\"|\"z\"|\"k\"|\"h\"|null}\r\n */\r\nfunction determineCorrectPreposition(nextWord, prepLower) {\r\n  if (!nextWord) return null;\r\n\r\n  // normalize and trim\r\n  const nw = nextWord.normalize(\"NFC\").trim();\r\n  if (!nw) return null;\r\n\r\n  // grab the very first character\r\n  let ch = nw[0];\r\n\r\n  // if digit, map to letter; else lowercase letter\r\n  const digitMap = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = (ch >= '0' && ch <= '9')\r\n    ? digitMap[ch]\r\n    : ch.toLowerCase();\r\n\r\n  // S/Z logic: unvoiced ⇒ \"s\", otherwise \"z\"\r\n  if (prepLower === \"s\" || prepLower === \"z\") {\r\n    const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n    return unvoiced.has(key) ? \"s\" : \"z\";\r\n  }\r\n\r\n  // K/H logic: before k or g ⇒ \"h\", otherwise \"k\"\r\n  if (prepLower === \"k\" || prepLower === \"h\") {\r\n    return (key === \"k\" || key === \"g\") ? \"h\" : \"k\";\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// Utility: build list of body, headers, and footers\r\n// ─────────────────────────────────────────────────\r\nasync function collectScanRanges(context) {\r\n  const ranges = [];\r\n\r\n  // include document body\r\n  ranges.push(context.document.body);\r\n\r\n  // include each section’s primary header & footer\r\n  const sections = context.document.sections;\r\n  sections.load(\"items\");\r\n  await context.sync();\r\n\r\n  for (const section of sections.items) {\r\n    ranges.push(section.getHeader(\"primary\"));\r\n    ranges.push(section.getFooter(\"primary\"));\r\n  }\r\n\r\n  return ranges;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z/K/H: highlight all mismatches, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear all existing highlights\r\n      context.document.body.font.highlightColor = null;\r\n      const sections = context.document.sections;\r\n      sections.load(\"items\");\r\n      await context.sync();\r\n      for (const sec of sections.items) {\r\n        sec.getHeader(\"primary\").font.highlightColor = null;\r\n        sec.getFooter(\"primary\").font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n      const mismatches = [];\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw   = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          mismatches.push(r);\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept All: replace every mismatch in one batch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw   = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          const replacement =\r\n            raw === raw.toUpperCase()\r\n              ? expected.toUpperCase()\r\n              : expected;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.insertText(replacement, Word.InsertLocation.replace);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject All: clear every pink mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          if (!/^[sSzZkKhH]$/.test(raw)) continue;\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n\n    const makeHandler = fn => async event => {\n      console.log(`▶️ ${fn.name} invoked`);\n      try {\n        await fn();\n      } catch (e) {\n        console.error(`${fn.name} threw:`, e);\n      } finally {\n        event.completed();    \n      }\n    };\n\n    Office.actions.associate(\n      \"checkDocumentText\",\n      makeHandler(checkDocumentText)\n    );\n    Office.actions.associate(\n      \"acceptAllChanges\",\n      makeHandler(acceptAllChanges)\n    );\n    Office.actions.associate(\n      \"rejectAllChanges\",\n      makeHandler(rejectAllChanges)\n    );\n\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","nextWord","prepLower","nw","normalize","trim","ch","key","toLowerCase","Set","has","async","collectScanRanges","context","ranges","push","document","body","sections","load","sync","section","items","getHeader","getFooter","checkDocumentText","Word","run","font","highlightColor","sec","matchWholeWord","matchCase","scanRanges","mismatches","rng","sRes","search","zRes","kRes","hRes","r","lower","text","includes","after","getRange","getNextTextRange","nxt","expected","trackedObjects","add","length","first","select","type","message","icon","e","console","error","acceptAllChanges","raw","replacement","toUpperCase","insertText","InsertLocation","replace","rejectAllChanges","test","log","onReady","info","host","HostType","makeHandler","fn","name","event","completed","actions","associate"],"sourceRoot":""}