{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// — Log immediately when the task logic bundle loads —\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic helper ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Exposed commands ––//\r\nexport async function checkDocumentText() {\r\n  console.log(\"checkDocumentText()\", { isChecking: state.isChecking });\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(checkDocumentText) start\");\r\n\r\n      // 1) clear old highlights & state\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // 2) search for single letters “s” & “z”\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sRanges = context.document.body.search(\"s\", opts);\r\n      const zRanges = context.document.body.search(\"z\", opts);\r\n      sRanges.load(\"items\");\r\n      zRanges.load(\"items\");\r\n      await context.sync();\r\n\r\n      const raw = [...sRanges.items, ...zRanges.items];\r\n      console.log(\"→ raw hits:\", raw.length);\r\n\r\n      // 3) filter down to exact “s” or “z”\r\n      const candidates = raw.filter(r => {\r\n        const t = r.text.trim().toLowerCase();\r\n        return (t === \"s\" || t === \"z\");\r\n      });\r\n      console.log(\"→ filtered candidates:\", candidates.length);\r\n\r\n      // 4) for each candidate, grab the next word and compare\r\n      let errors = [];\r\n      for (let prep of candidates) {\r\n        const after = prep.getRange(\"After\");\r\n        // → use a string here instead of the missing enum\r\n        after.expandTo(\"Word\");\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ Found mismatches:\", errors.length, errors);\r\n\r\n      // 5) no errors? show a toast\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n        return;\r\n      }\r\n\r\n      // 6) highlight them & select the first\r\n      errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n      await context.sync();\r\n      errors[0].range.select();\r\n      console.log(\"→ Highlighted and selected first suggestion\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"acceptCurrentChange()\", { currentIndex: state.currentIndex, total: state.errors.length });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ accepted one change, now at index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"rejectCurrentChange()\", { currentIndex: state.currentIndex });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ rejected one change, now at index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"acceptAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n      console.log(\"→ accepted all changes\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"rejectAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      state.errors = [];\r\n      console.log(\"→ rejected all changes\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"./preposition.js\";\n\n// — Log immediately when the commands bundle loads —\nconsole.log(\"⭐ commands.js loaded\");\n\nOffice.onReady(info => {\n  console.log(\"▶️ Office.onReady\", info);\n\n  if (info.host === Office.HostType.Word) {\n    console.log(\"🔗 Associating actions…\");\n    Office.actions.associate(\"checkDocumentText\",   checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\",    acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\",    rejectAllChanges);\n    console.log(\"✅ Actions associated\");\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sRanges","context","document","body","search","zRanges","load","sync","raw","items","length","candidates","filter","r","t","text","trim","prep","after","getRange","expandTo","nextWord","actual","expect","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","total","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","actions","associate"],"sourceRoot":""}