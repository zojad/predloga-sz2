{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office, Word */\n\n// State\nconst state = {\n  errors: [],\n  currentIndex: 0\n};\n\n// Office initialization\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    Office.actions.associate(\"checkDocumentText\", checkDocumentText);\n    Office.actions.associate(\"acceptCurrentChange\", acceptCurrentChange);\n    Office.actions.associate(\"rejectCurrentChange\", rejectCurrentChange);\n    Office.actions.associate(\"acceptAllChanges\", acceptAllChanges);\n    Office.actions.associate(\"rejectAllChanges\", rejectAllChanges);\n  }\n});\n\n// Determines correct preposition (supports letters + numbers)\nfunction determineCorrectPreposition(word) {\n  if (!word) return null;\n\n  const unvoiced = new Set(['c', 'č', 'f', 'h', 'k', 'p', 's', 'š', 't']);\n  const digitPronunciation = {\n    '1': 'e', '2': 'd', '3': 't', '4': 'š', '5': 'p',\n    '6': 'š', '7': 's', '8': 'o', '9': 'd', '0': 'n'\n  };\n\n  let firstChar = '';\n  for (const char of word) {\n    if (char.match(/[a-zA-ZčČšŠžŽ0-9]/)) {\n      firstChar = char.toLowerCase();\n      break;\n    }\n  }\n\n  if (!firstChar) return null;\n\n  if (/\\d/.test(firstChar)) {\n    const sound = digitPronunciation[firstChar];\n    return unvoiced.has(sound) ? 's' : 'z';\n  }\n\n  return unvoiced.has(firstChar) ? 's' : 'z';\n}\n\n// Check document for errors\nasync function checkDocumentText() {\n  try {\n    await Word.run(async (context) => {\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = null;\n      });\n      state.errors = [];\n      state.currentIndex = 0;\n\n      const searchOptions = { matchCase: false, matchWholeWord: true };\n      const sResults = context.document.body.search(\"s\", searchOptions);\n      const zResults = context.document.body.search(\"z\", searchOptions);\n      sResults.load(\"items\");\n      zResults.load(\"items\");\n      await context.sync();\n\n      const errorCandidates = [...sResults.items, ...zResults.items]\n        .filter(prep => ['s', 'z'].includes(prep.text.trim().toLowerCase()))\n        .map(prep => {\n          const next = prep.getNextTextRange(\"Word\");\n          if (next) next.load(\"text\");\n          return { prepositionRange: prep, nextWordRange: next };\n        });\n\n      await context.sync();\n\n      state.errors = errorCandidates\n        .map(({ prepositionRange, nextWordRange }) => {\n          const currentPrep = prepositionRange.text.trim().toLowerCase();\n          const nextWord = nextWordRange?.text?.trim?.();\n          const correctPrep = determineCorrectPreposition(nextWord);\n          return correctPrep && currentPrep !== correctPrep\n            ? { range: prepositionRange, suggestion: correctPrep }\n            : null;\n        })\n        .filter(Boolean);\n\n      state.errors.forEach(err => {\n        err.range.font.highlightColor = \"Yellow\";\n      });\n\n      await context.sync();\n\n      if (state.errors.length > 0) {\n        state.errors[0].range.select();\n      } else {\n        context.document.body.insertComment(\"No preposition errors found.\", \"start\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Document check failed:\", error);\n  }\n}\n\n// Accept one\nasync function acceptCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to accept change:\", error);\n  }\n}\n\n// Reject one\nasync function rejectCurrentChange() {\n  if (state.currentIndex >= state.errors.length) return;\n  try {\n    await Word.run(async (context) => {\n      const err = state.errors[state.currentIndex];\n      err.range.font.highlightColor = null;\n      await context.sync();\n      state.currentIndex++;\n      if (state.currentIndex < state.errors.length) {\n        state.errors[state.currentIndex].range.select();\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to reject change:\", error);\n  }\n}\n\n// Accept all\nasync function acceptAllChanges() {\n  if (state.errors.length === 0) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to accept all changes:\", error);\n  }\n}\n\n// Reject all\nasync function rejectAllChanges() {\n  if (state.errors.length === 0) return;\n  try {\n    await Word.run(async (context) => {\n      for (const err of state.errors) {\n        err.range.font.highlightColor = null;\n      }\n      await context.sync();\n      state.errors = [];\n    });\n  } catch (error) {\n    console.error(\"Failed to reject all changes:\", error);\n  }\n}\n\n// For taskpane testing if needed\nwindow.checkDocumentText = checkDocumentText;\nwindow.acceptCurrentChange = acceptCurrentChange;\nwindow.rejectCurrentChange = rejectCurrentChange;\nwindow.acceptAllChanges = acceptAllChanges;\nwindow.rejectAllChanges = rejectAllChanges;\n\n"],"names":["state","errors","currentIndex","async","checkDocumentText","Word","run","forEach","err","range","font","highlightColor","searchOptions","matchCase","matchWholeWord","sResults","context","document","body","search","zResults","load","sync","errorCandidates","items","filter","prep","includes","text","trim","toLowerCase","map","next","getNextTextRange","prepositionRange","nextWordRange","_ref","currentPrep","nextWord","correctPrep","word","unvoiced","Set","digitPronunciation","firstChar","char","match","test","sound","has","determineCorrectPreposition","suggestion","Boolean","length","select","insertComment","error","console","acceptCurrentChange","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","Office","onReady","info","host","HostType","actions","associate","window"],"sourceRoot":""}