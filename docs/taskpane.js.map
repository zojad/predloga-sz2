{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  // queue of mismatches: { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }[]\r\n  errors: [],\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide “s” vs “z” from the first letter of the next word.\r\n * Unvoiced initials ⇒ “s”, otherwise ⇒ “z”.\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: clear ALL highlights & tracked ranges,\r\n//    re-scan, highlight mismatches, select first.\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // *** Release any stale tracked ranges up front ***\r\n      context.trackedObjects.releaseAll();\r\n      await context.sync();\r\n\r\n      // 1) clear old highlights\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // 2) find every standalone “s” or “z”\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // 3) evaluate each candidate\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        const after = r\r\n          .getRange(\"After\")\r\n          .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || raw.toLowerCase() === expectedLower) continue;\r\n\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first mismatch\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace the first in queue, clear its\r\n//    highlight, then call checkDocumentText() again.\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear the first in queue, then re-scan.\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: apply every queued suggestion in one shot.\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: clear highlights for every queued range.\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","showNotification","id","opts","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","deleteAsync","Word","run","context","trackedObjects","releaseAll","sync","oldS","document","body","search","matchWholeWord","matchCase","oldZ","load","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","add","push","range","length","first","select","type","message","icon","e","console","error","acceptCurrentChange","shift","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}