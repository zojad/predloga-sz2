{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // reset\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sSearch = context.document.body.search(\"s\", opts);\r\n      const zSearch = context.document.body.search(\"z\", opts);\r\n      sSearch.load(\"items\");\r\n      zSearch.load(\"items\");\r\n      await context.sync();\r\n\r\n      const all = [...sSearch.items, ...zSearch.items];\r\n      const candidates = all.filter(r => [\"s\",\"z\"].includes(r.text.trim().toLowerCase()));\r\n      console.log(`→ found ${candidates.length} s/z candidates`);\r\n\r\n      const errors = [];\r\n      for (const prep of candidates) {\r\n        const after = prep.getRange(\"After\");\r\n        const nextRange = after.getNextTextRange([\" \",\"\\n\",\".\",\",\",\";\",\"?\",\"!\"], true);\r\n        nextRange.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nxt = nextRange.text.trim();\r\n        if (!nxt) continue;\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nxt);\r\n        if (expect && actual !== expect) {\r\n          context.trackedObjects.add(prep);\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(`→ mismatches found: ${errors.length}`);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No 's'/'z' mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange() start\", state.currentIndex, state.errors.length);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.select();\r\n      await context.sync();\r\n\r\n      // Replace preposition\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      // advance\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange() start\", state.currentIndex, state.errors.length);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.select();\r\n      await context.sync();\r\n\r\n      // Clear highlight\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges() start\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(`→ applying acceptAll to ${state.errors.length} items`);\r\n      for (const err of state.errors) {\r\n        err.range.select();\r\n        await context.sync();\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n        await context.sync();\r\n      }\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n      showNotification(NOTIF_ID, {\r\n        type: \"informationalMessage\",\r\n        message: \"Accepted all prepositions!\",\r\n        icon: \"Icon.80x80\",\r\n        persistent: false\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges() start\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(`→ applying rejectAll to ${state.errors.length} items`);\r\n      for (const err of state.errors) {\r\n        err.range.select();\r\n        await context.sync();\r\n        err.range.font.highlightColor = null;\r\n        await context.sync();\r\n      }\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n      showNotification(NOTIF_ID, {\r\n        type: \"informationalMessage\",\r\n        message: \"Cleared all highlights!\",\r\n        icon: \"Icon.80x80\",\r\n        persistent: false\r\n      });\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sSearch","context","document","body","search","zSearch","load","sync","candidates","items","filter","r","includes","text","trim","length","prep","nextRange","getRange","getNextTextRange","nxt","actual","expect","trackedObjects","add","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}