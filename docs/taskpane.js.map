{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // Array<{ range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }>\r\n  currentIndex: 0\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Helpers for ribbon notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide proper “s” vs “z” based on the first letter/digit of the next word\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: single full scan, track & highlight all mismatches, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  await Word.run(async context => {\r\n    // A) Clear old highlights\r\n    const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    oldS.load(\"items\"); oldZ.load(\"items\");\r\n    await context.sync();\r\n    [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n    await context.sync();\r\n\r\n    // B) Find all standalone “s” and “z”\r\n    const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n    const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    // C) Evaluate & enqueue mismatches\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n      // look at the next word\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const expectedLower = determineCorrectPreposition(nxt);\r\n      if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n      // preserve original case\r\n      const suggestion = raw === raw.toUpperCase()\r\n        ? expectedLower.toUpperCase()\r\n        : expectedLower;\r\n\r\n      // track this range *now* and highlight it\r\n      context.trackedObjects.add(r);\r\n      r.font.highlightColor = HIGHLIGHT_COLOR;\r\n      state.errors.push({ range: r, suggestion });\r\n    }\r\n\r\n    await context.sync();\r\n\r\n    // D) select first mismatch (or notify “no mismatches”)\r\n    if (!state.errors.length) {\r\n      showNotification(NOTIF_ID, {\r\n        type: \"informationalMessage\",\r\n        message: \"✨ No mismatches!\",\r\n        icon: \"Icon.80x80\"\r\n      });\r\n    } else {\r\n      const firstRange = state.errors[0].range;\r\n      context.trackedObjects.add(firstRange);\r\n      firstRange.select();\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace current, clear highlight, advance & select next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  // get & remove the current mismatch\r\n  const { range, suggestion } = state.errors[state.currentIndex];\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n\r\n    // advance pointer\r\n    state.currentIndex++;\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear highlight on current, advance & select next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range } = state.errors[state.currentIndex];\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n\r\n    state.currentIndex++;\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: replace & clear all mismatches in one pass\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  // reset state\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: clear all highlights at once\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","oldS","context","document","body","search","matchWholeWord","matchCase","oldZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","trackedObjects","add","push","range","length","firstRange","select","type","message","icon","acceptCurrentChange","insertText","InsertLocation","replace","next","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}