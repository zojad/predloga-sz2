{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // Array<{ range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }>\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Ribbon notification helpers\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// Determine “s” vs “z” based on the next word’s first letter\r\n// ─────────────────────────────────────────────────\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: clear YOUR old highlights, then re-scan\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  // — Step A: clear only the highlights WE applied last time —\r\n  await Word.run(async context => {\r\n    for (const e of state.errors) {\r\n      context.trackedObjects.add(e.range);\r\n      e.range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  // reset our queue\r\n  state.errors = [];\r\n\r\n  try {\r\n    // — Step B: fresh scan for mismatches —\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        // look at the next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // decide expected preposition\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // preserve capitalization\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // highlight & enqueue\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: fix first mismatch & auto-re-scan\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-scan and select next\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear first highlight & auto-re-scan\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-scan and select next\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: fresh scan → replace every mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const expectedLower = determineCorrectPreposition(nxt);\r\n      if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n      const suggestion = raw === raw.toUpperCase()\r\n        ? expectedLower.toUpperCase()\r\n        : expectedLower;\r\n\r\n      r.insertText(suggestion, Word.InsertLocation.replace);\r\n      r.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  // clear our queue so the next scan is fresh\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: fresh scan → clear every mismatch highlight\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      if (/^[sSzZ]$/.test(r.text.trim())) {\r\n        r.font.highlightColor = null;\r\n      }\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","e","context","trackedObjects","add","range","font","highlightColor","sync","matchWholeWord","matchCase","sRes","document","body","search","zRes","load","r","items","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","push","length","first","select","type","message","icon","console","error","acceptCurrentChange","shift","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}