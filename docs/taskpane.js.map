{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// — Log immediately when the task logic bundle loads —\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic helper ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  // find first letter or digit\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Exposed commands ––//\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"checkDocumentText()\", { isChecking: state.isChecking });\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(checkDocumentText) start\");\r\n\r\n      // Clear previous highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      let allRanges = [];\r\n\r\n      // search separately for \"s\" and \"z\"\r\n      const sRanges = context.document.body.search(\"s\", opts);\r\n      const zRanges = context.document.body.search(\"z\", opts);\r\n      sRanges.load(\"items\");\r\n      zRanges.load(\"items\");\r\n      await context.sync();\r\n\r\n      allRanges.push(...sRanges.items, ...zRanges.items);\r\n      console.log(\"→ raw hits:\", allRanges.length);\r\n\r\n      // filter to only single-letter matches\r\n      const candidates = allRanges.filter(r => {\r\n        const t = r.text.trim().toLowerCase();\r\n        return (t === \"s\" || t === \"z\");\r\n      });\r\n      console.log(\"→ filtered candidates:\", candidates.length);\r\n\r\n      let errors = [];\r\n      for (let prep of candidates) {\r\n        // grab the next word\r\n        const after = prep.getRange(\"After\");\r\n        after.expandTo(Word.TextRangeUnit.word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ Found mismatches:\", errors.length, errors);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Highlight + select first\r\n      errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n      await context.sync();\r\n      errors[0].range.select();\r\n      console.log(\"→ Highlighted and selected first suggestion\");\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"acceptCurrentChange()\", { currentIndex: state.currentIndex, total: state.errors.length });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ accepted one change, moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"rejectCurrentChange()\", { currentIndex: state.currentIndex });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n      console.log(\"→ rejected one change, moved to index\", state.currentIndex);\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"acceptAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      console.log(\"→ accepted all changes\");\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"rejectAllChanges()\", { total: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      console.log(\"→ rejected all changes\");\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","allRanges","sRanges","context","document","body","search","zRanges","load","sync","push","items","length","candidates","filter","r","t","text","trim","prep","after","getRange","expandTo","TextRangeUnit","word","nextWord","actual","expect","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","total","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}