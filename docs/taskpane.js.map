{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // array of { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Helpers to push/pull ribbon notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Look at the first letter of rawWord and decide \"s\" vs \"z\".\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return voiceless.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Fresh scan & highlight all mismatches, select the first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // ** flush _all_ highlights in the body **\r\n      context.document.body.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      // search for standalone \"s\" & \"z\"\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // for each letter candidate decide if it's wrong\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;   // exactly one letter\r\n\r\n        // peek at the next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // decide what it should have been\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // preserve upper/lower\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // highlight just that single-letter range\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the very first wrong letter\r\n        const first = state.errors[0].range;\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: fix the first mismatch & then re-scan\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // pull off first item\r\n  const { range, suggestion } = state.errors.shift();\r\n\r\n  // replace it\r\n  await Word.run(async context => {\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-run the full scan → next mismatch will be selected automatically\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear highlight on first mismatch & then re-scan\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n\r\n  // pull off first item\r\n  const { range } = state.errors.shift();\r\n\r\n  // just clear its highlight\r\n  await Word.run(async context => {\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // re-run a fresh scan\r\n  await checkDocumentText();\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: batch-replace every mismatch in one go\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      const raw = r.text.trim();\r\n      if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n      const after = r.getRange(\"After\")\r\n                     .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n      after.load(\"text\");\r\n      await context.sync();\r\n      const nxt = after.text.trim();\r\n      if (!nxt) continue;\r\n\r\n      const expectedLower = determineCorrectPreposition(nxt);\r\n      if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n      const suggestion = raw === raw.toUpperCase()\r\n        ? expectedLower.toUpperCase()\r\n        : expectedLower;\r\n\r\n      r.insertText(suggestion, Word.InsertLocation.replace);\r\n      r.font.highlightColor = null;\r\n    }\r\n\r\n    await context.sync();\r\n  });\r\n\r\n  // clear our queue so we can scan again\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: batch-clear every highlight in one go\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    const opts = { matchWholeWord: true, matchCase: false };\r\n    const sRes = context.document.body.search(\"s\", opts);\r\n    const zRes = context.document.body.search(\"z\", opts);\r\n    sRes.load(\"items\"); zRes.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const r of [...sRes.items, ...zRes.items]) {\r\n      if (/^[sSzZ]$/.test(r.text.trim())) {\r\n        r.font.highlightColor = null;\r\n      }\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","voiceless","Set","key","test","has","async","checkDocumentText","Word","run","context","document","body","font","highlightColor","sync","matchWholeWord","matchCase","sRes","search","zRes","load","r","items","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","push","range","length","select","type","message","icon","e","console","error","acceptCurrentChange","shift","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}