{"version":3,"file":"taskpane.js","mappings":"yBAEA,IAAIA,EAAQ,CAEVC,OAAQ,GACRC,YAAY,GAGd,MACMC,EAAW,WAGjB,SAASC,EAAkBC,GACrBC,OAAOC,sBAAsBC,aAC/BF,OAAOC,qBAAqBC,YAAYH,EAE5C,CACA,SAASI,EAAiBJ,EAAIK,GACxBJ,OAAOC,sBAAsBI,UAC/BL,OAAOC,qBAAqBI,SAASN,EAAIK,EAE7C,CAKA,SAASE,EAA4BC,GACnC,IAAKA,EAAS,OAAO,KACrB,MAAMC,EAAID,EAAQE,UAAU,OAAOC,MAAM,eACzC,IAAKF,EAAG,OAAO,KACf,MAAMG,EAAIH,EAAE,GAAGI,cACTC,EAAW,IAAIC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAEpDC,EAAM,KAAKC,KAAKL,GADL,CAAE,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,KAC3DA,GAAKA,EACzC,OAAOE,EAASI,IAAIF,GAAO,IAAM,GACnC,CAKOG,eAAeC,IACpB,IAAIzB,EAAME,WAAV,CACAF,EAAME,YAAa,EACnBE,EAAkBD,GAClBH,EAAMC,OAAS,GAEf,UACQyB,KAAKC,KAAIH,UACb,MAAMd,EAAO,CAAEkB,gBAAgB,EAAMC,WAAW,GAC1CC,EAAOC,EAAQC,SAASC,KAAKC,OAAO,IAAKxB,GACzCyB,EAAOJ,EAAQC,SAASC,KAAKC,OAAO,IAAKxB,GAC/CoB,EAAKM,KAAK,SAAUD,EAAKC,KAAK,eACxBL,EAAQM,OAGd,IAAK,MAAMC,IAAK,IAAIR,EAAKS,SAAUJ,EAAKI,OACtCD,EAAEE,KAAKJ,KAAK,wBAERL,EAAQM,OAGd,IAAK,MAAMC,IAAK,IAAIR,EAAKS,SAAUJ,EAAKI,OAAQ,CAC9C,MAAME,EAAMH,EAAEI,KAAKC,OACnB,IAAK,WAAWrB,KAAKmB,GAAM,SAE3B,MAAMG,EAAgBN,EAAEE,KAAKK,eAGvBC,EAAQR,EACXS,SAAS,SACTC,iBAAiB,CAAC,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,MAAM,GAC1DF,EAAMV,KAAK,cACLL,EAAQM,OACd,MAAMY,EAAMH,EAAMJ,KAAKC,OACvB,IAAKM,EAAK,SAEV,MAAMC,EAAgBtC,EAA4BqC,GAClD,IAAKC,GAAiBA,IAAkBT,EAAIvB,cAAe,SAG3D,MAAMiC,EAAcV,IAAQA,EAAIW,cAC5BF,EAAcE,cACdF,EAGJnB,EAAQsB,eAAeC,IAAIhB,GAC3BA,EAAEE,KAAKK,eA9ES,UAiFhB7C,EAAMC,OAAOsD,KAAK,CAAEC,MAAOlB,EAAGa,aAAYP,iBAC5C,CAIA,SAFMb,EAAQM,OAETrC,EAAMC,OAAOwD,OAMX,CAEL,MAAMC,EAAQ1D,EAAMC,OAAO,GAAGuD,MAC9BzB,EAAQsB,eAAeC,IAAII,GAC3BA,EAAMC,eACA5B,EAAQM,MAChB,MAXE5B,EAAiBN,EAAU,CACzByD,KAAM,uBACNC,QAAS,mBACTC,KAAM,cAQV,GAEJ,CAAE,MAAOC,GACPC,QAAQC,MAAM,0BAA2BF,GACzCtD,EAAiBN,EAAU,CACzByD,KAAM,eACNC,QAAS,mCAEb,CAAE,QACA7D,EAAME,YAAa,CACrB,CA3E4B,CA4E9B,CAKOsB,eAAe0C,IACpB,IAAKlE,EAAMC,OAAOwD,OAAQ,OAC1B,MAAM,MAAED,EAAK,WAAEL,EAAU,cAAEP,GAAkB5C,EAAMC,OAAOkE,cAEpDzC,KAAKC,KAAIH,UACbO,EAAQsB,eAAeC,IAAIE,GAE3BA,EAAMY,WAAWjB,EAAYzB,KAAK2C,eAAeC,SAEjDd,EAAMhB,KAAKK,eAAiBD,QACtBb,EAAQM,MAAM,IAIlBrC,EAAMC,OAAOwD,cACT/B,KAAKC,KAAIH,UACb,MAAM+C,EAAOvE,EAAMC,OAAO,GAAGuD,MAC7BzB,EAAQsB,eAAeC,IAAIiB,GAC3BA,EAAKZ,eACC5B,EAAQM,MAAM,GAG1B,CAKOb,eAAegD,IACpB,IAAKxE,EAAMC,OAAOwD,OAAQ,OAC1B,MAAM,MAAED,EAAK,cAAEZ,GAAkB5C,EAAMC,OAAOkE,cAExCzC,KAAKC,KAAIH,UACbO,EAAQsB,eAAeC,IAAIE,GAC3BA,EAAMhB,KAAKK,eAAiBD,QACtBb,EAAQM,MAAM,IAGlBrC,EAAMC,OAAOwD,cACT/B,KAAKC,KAAIH,UACb,MAAM+C,EAAOvE,EAAMC,OAAO,GAAGuD,MAC7BzB,EAAQsB,eAAeC,IAAIiB,GAC3BA,EAAKZ,eACC5B,EAAQM,MAAM,GAG1B,CAKOb,eAAeiD,IACpBrE,EAAkBD,SAEZuB,KAAKC,KAAIH,UACb,IAAK,MAAM,MAAEgC,EAAK,WAAEL,EAAU,cAAEP,KAAmB5C,EAAMC,OACvD8B,EAAQsB,eAAeC,IAAIE,GAC3BA,EAAMY,WAAWjB,EAAYzB,KAAK2C,eAAeC,SACjDd,EAAMhB,KAAKK,eAAiBD,QAExBb,EAAQM,MAAM,IAGtBrC,EAAMC,OAAS,GACfQ,EAAiBN,EAAU,CACzByD,KAAM,uBACNC,QAAS,gBACTC,KAAM,cAEV,CAKOtC,eAAekD,IACpBtE,EAAkBD,SAEZuB,KAAKC,KAAIH,UACb,IAAK,MAAM,MAAEgC,EAAK,cAAEZ,KAAmB5C,EAAMC,OAC3C8B,EAAQsB,eAAeC,IAAIE,GAC3BA,EAAMhB,KAAKK,eAAiBD,QAExBb,EAAQM,MAAM,IAGtBrC,EAAMC,OAAS,GACfQ,EAAiBN,EAAU,CACzByD,KAAM,uBACNC,QAAS,gCACTC,KAAM,cAEV,CCrMAxD,OAAOqE,SAAQC,IACTA,EAAKC,OAASvE,OAAOwE,SAASpD,OAChCM,SAAS+C,eAAe,mBAAmBC,QAAYvD,EACvDO,SAAS+C,eAAe,sBAAsBC,QAAUd,EACxDlC,SAAS+C,eAAe,sBAAsBC,QAAUR,EACxDxC,SAAS+C,eAAe,mBAAmBC,QAAaP,EACxDzC,SAAS+C,eAAe,mBAAmBC,QAAaN,EAC1D,G","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  // each entry: { range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\", originalColor: string|null }\r\n  errors: [],\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID = \"noErrors\";\r\n\r\n// — Helpers for ribbon notifications —\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Given the next word, returns \"s\" or \"z\".\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: highlight mismatches, capture their original color, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // Load each range's current highlight color\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        r.font.load(\"highlightColor\");\r\n      }\r\n      await context.sync();\r\n\r\n      // Now decide which ones are wrong\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        const originalColor = r.font.highlightColor; // may be null\r\n\r\n        // peek at next word\r\n        const after = r\r\n          .getRange(\"After\")\r\n          .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // preserve case\r\n        const suggestion = (raw === raw.toUpperCase())\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // highlight error only on that letter\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n\r\n        // queue it, with its original color\r\n        state.errors.push({ range: r, suggestion, originalColor });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the very first mismatch\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace the letter, re-apply its original color, select next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range, suggestion, originalColor } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    // replace text\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    // restore whatever color was there before\r\n    range.font.highlightColor = originalColor;\r\n    await context.sync();\r\n  });\r\n\r\n  // if there’s another error queued, select it\r\n  if (state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[0].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: restore its original color, select next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (!state.errors.length) return;\r\n  const { range, originalColor } = state.errors.shift();\r\n\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = originalColor;\r\n    await context.sync();\r\n  });\r\n\r\n  if (state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[0].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: batch-replace every mismatch, restoring original colors\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion, originalColor } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = originalColor;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: restore every flagged letter’s original color\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, originalColor } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = originalColor;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Restored original highlights!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","matchWholeWord","matchCase","sRes","context","document","body","search","zRes","load","sync","r","items","font","raw","text","trim","originalColor","highlightColor","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","trackedObjects","add","push","range","length","first","select","type","message","icon","e","console","error","acceptCurrentChange","shift","insertText","InsertLocation","replace","next","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}