{"version":3,"file":"taskpane.js","mappings":"yBAGA,MAAMA,EAAQ,CACZC,OAAQ,GACRC,aAAc,EACdC,YAAY,GAIRC,EAAkB,WAQxB,SAASC,EAAiBC,EAAIC,GACxBC,OAAOC,sBAAsBC,UAC/BF,OAAOC,qBAAqBC,SAASJ,EAAIC,EAE7C,CAGA,SAASI,EAA4BC,GACnC,IAAKA,EAAU,OAAO,KACtB,MAAMC,EAAID,EAASE,UAAU,OAAOC,MAAM,eAC1C,IAAKF,EAAG,OAAO,KACf,MAAMG,EAAQH,EAAE,GAAGI,cACbC,EAAY,IAAIC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAC3D,GAAI,KAAKC,KAAKJ,GAAQ,CAEpB,MAAMK,EAAW,CAAE,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,IAAI,EAAI,KAC/F,OAAOH,EAAUI,IAAID,EAASL,IAAU,IAAM,GAChD,CACA,OAAOE,EAAUI,IAAIN,GAAS,IAAM,GACtC,CAKOO,eAAeC,IACpB,IAAIxB,EAAMG,WAAV,CA9BF,IAA2BG,EA+BzBN,EAAMG,YAAa,EA/BMG,EAgCPF,EA/BdI,OAAOC,sBAAsBgB,aAC/BjB,OAAOC,qBAAqBgB,YAAYnB,GA+B1CN,EAAMC,OAAS,GACfD,EAAME,aAAe,EAErB,UACQwB,KAAKC,KAAIJ,UAEbvB,EAAMC,OAAO2B,SAAQC,GAAKA,EAAEC,MAAMC,KAAKC,eAAiB,OAGxD,MAAMC,EAAO,CAAEC,gBAAgB,EAAMC,WAAW,GAC1CC,EAAOC,EAAQC,SAASC,KAAKC,OAAO,IAAKP,GACzCQ,EAAOJ,EAAQC,SAASC,KAAKC,OAAO,IAAKP,GAC/CG,EAAKM,KAAK,SAAUD,EAAKC,KAAK,eACxBL,EAAQM,OAEd,MAAMC,EAAa,IAAIR,EAAKS,SAAUJ,EAAKI,OACxCC,QAAOC,GAAK,WAAW3B,KAAK2B,EAAEC,QAGjC,IAAK,IAAID,KAAKH,EAAY,CACxB,MAAMK,EAAQF,EAAEG,SAAS,SACTC,iBAAiB,CAAC,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,MAAM,GACvEF,EAAMP,KAAK,cACLL,EAAQM,OACd,MAAMS,EAAMH,EAAMD,KAAKK,OACvB,IAAKD,EAAK,SAEV,MAAME,EAASP,EAAEC,KAAKK,OAAOpC,cACvBsC,EAAS5C,EAA4ByC,GACvCG,GAAUD,IAAWC,IAEvBlB,EAAQmB,eAAeC,IAAIV,GAC3BA,EAAEhB,KAAKC,eArEO,UAsEdhC,EAAMC,OAAOyD,KAAKX,GAEtB,CAEA,GAAK/C,EAAMC,OAAO0D,OAMX,CAEL,MAAM3C,EAAQhB,EAAMC,OAAO,GAC3BoC,EAAQmB,eAAeC,IAAIzC,GAC3BA,EAAM4C,eACAvB,EAAQM,MAChB,MAXEtC,EAAiBD,EAAU,CACzByD,KAAM,uBACNC,QAAS,mBACTC,KAAM,cAQV,GAEJ,CAAE,MAAOlC,GACPmC,QAAQC,MAAMpC,GACdxB,EAAiBD,EAAU,CAAEyD,KAAM,eAAgBC,QAAS,gBAC9D,CAAE,QACA9D,EAAMG,YAAa,CACrB,CA3D4B,CA4D9B,CAKOoB,eAAe2C,IACpB,KAAIlE,EAAME,cAAgBF,EAAMC,OAAO0D,QAEvC,UACQjC,KAAKC,KAAIJ,UACb,MAAMwB,EAAI/C,EAAMC,OAAOD,EAAME,cAC7BmC,EAAQmB,eAAeC,IAAIV,GAG3BV,EAAQK,KAAKK,EAAG,cACVV,EAAQM,OACd,MAAMwB,EAAQpB,EAAEC,KAEVoB,EACM,MAAVD,EAAgB,IACN,MAAVA,EAAgB,IACN,MAAVA,EAAgB,IACN,MAAVA,EAAgB,IAChBA,EAOF,GALApB,EAAEsB,WAAWD,EAAM1C,KAAK4C,eAAeC,SACvCxB,EAAEhB,KAAKC,eAAiB,KAGxBhC,EAAME,eACFF,EAAME,aAAeF,EAAMC,OAAO0D,OAAQ,CAC5C,MAAMP,EAAMpD,EAAMC,OAAOD,EAAME,cAC/BmC,EAAQmB,eAAeC,IAAIL,GAC3BA,EAAIQ,QACN,OAEMvB,EAAQM,MAAM,IAItB3C,EAAMC,OAAOuE,OAAOxE,EAAME,aAAe,EAAG,GACxCF,EAAME,aAAeF,EAAMC,OAAO0D,SACpC3D,EAAME,aAAe,EAEzB,CAAE,MAAO2B,GACPmC,QAAQC,MAAMpC,EAChB,CACF,CAKON,eAAekD,IACpB,KAAIzE,EAAME,cAAgBF,EAAMC,OAAO0D,QAEvC,UACQjC,KAAKC,KAAIJ,UACb,MAAMwB,EAAI/C,EAAMC,OAAOD,EAAME,cAM7B,GALAmC,EAAQmB,eAAeC,IAAIV,GAE3BA,EAAEhB,KAAKC,eAAiB,KAExBhC,EAAME,eACFF,EAAME,aAAeF,EAAMC,OAAO0D,OAAQ,CAC5C,MAAMP,EAAMpD,EAAMC,OAAOD,EAAME,cAC/BmC,EAAQmB,eAAeC,IAAIL,GAC3BA,EAAIQ,QACN,OAEMvB,EAAQM,MAAM,IAItB3C,EAAMC,OAAOuE,OAAOxE,EAAME,aAAe,EAAG,GACxCF,EAAME,aAAeF,EAAMC,OAAO0D,SACpC3D,EAAME,aAAe,EAEzB,CAAE,MAAO2B,GACPmC,QAAQC,MAAMpC,EAChB,CACF,CAKON,eAAemD,IACpB,GAAK1E,EAAMC,OAAO0D,OAElB,UACQjC,KAAKC,KAAIJ,UAEb,IAAK,IAAIwB,KAAK/C,EAAMC,OAAQoC,EAAQK,KAAKK,EAAG,cACtCV,EAAQM,OAGd,IAAK,IAAII,KAAK/C,EAAMC,OAAQ,CAC1B,MAAM0E,EAAI5B,EAAEC,KACN4B,EACE,MAAND,EAAY,IACN,MAANA,EAAY,IACN,MAANA,EAAY,IACN,MAANA,EAAY,IACZA,EACF5B,EAAEsB,WAAWO,EAAGlD,KAAK4C,eAAeC,SACpCxB,EAAEhB,KAAKC,eAAiB,IAC1B,OACMK,EAAQM,MAAM,IAGtB3C,EAAMC,OAAS,GACfD,EAAME,aAAe,EACrBG,EAAiBD,EAAU,CACzByD,KAAM,uBACNC,QAAS,gBACTC,KAAM,cAEV,CAAE,MAAOlC,GACPmC,QAAQC,MAAMpC,EAChB,CACF,CAKON,eAAesD,IACpB,GAAK7E,EAAMC,OAAO0D,OAElB,UACQjC,KAAKC,KAAIJ,UACb,IAAK,IAAIwB,KAAK/C,EAAMC,OAClB8C,EAAEhB,KAAKC,eAAiB,WAEpBK,EAAQM,MAAM,IAGtB3C,EAAMC,OAAS,GACfD,EAAME,aAAe,EACrBG,EAAiBD,EAAU,CACzByD,KAAM,uBACNC,QAAS,eACTC,KAAM,cAEV,CAAE,MAAOlC,GACPmC,QAAQC,MAAMpC,EAChB,CACF,CCzOArB,OAAOsE,SAAQC,IACTA,EAAKC,OAASxE,OAAOyE,SAASvD,OAChCY,SAAS4C,eAAe,mBAAmBC,QAAY3D,EACvDc,SAAS4C,eAAe,sBAAsBC,QAAUjB,EACxD5B,SAAS4C,eAAe,sBAAsBC,QAAUV,EACxDnC,SAAS4C,eAAe,mBAAmBC,QAAaT,EACxDpC,SAAS4C,eAAe,mBAAmBC,QAAaN,EAC1D,G","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// state holds the list of mismatched ranges and which one we're on\r\nconst state = {\r\n  errors: [],        // Word.Range[] of each bad “s”/“z”\r\n  currentIndex: 0,   // which error is “current”\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// Utilities for showing/clearing the little Office ribbon notifications\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n// Your logic for choosing “s” vs “z” based on the next word’s first character\r\nfunction determineCorrectPreposition(nextWord) {\r\n  if (!nextWord) return null;\r\n  const m = nextWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const first = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  if (/\\d/.test(first)) {\r\n    // Map digits to their Slovene‐sound letter, then treat that as voiceless/voiced\r\n    const digitMap = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n    return voiceless.has(digitMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return voiceless.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n// ----------------------\r\n// 1) Check & highlight\r\n// ----------------------\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // 1. Undo any old highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n\r\n      // 2. Find every standalone “s” or “z” (both cases)\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      const candidates = [...sRes.items, ...zRes.items]\r\n        .filter(r => /^[sSzZ]$/.test(r.text));\r\n\r\n      // 3. For each one, pull the very next word and compare\r\n      for (let r of candidates) {\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        const actual = r.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nxt);\r\n        if (expect && actual !== expect) {\r\n          // track & highlight it\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          state.errors.push(r);\r\n        }\r\n      }\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first mismatch so the user sees where to click “Accept”\r\n        const first = state.errors[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    showNotification(NOTIF_ID, { type: \"errorMessage\", message: \"Check failed\" });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ---------------------------------\r\n// 2) Accept one (replace & advance)\r\n// ---------------------------------\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const r = state.errors[state.currentIndex];\r\n      context.trackedObjects.add(r);\r\n\r\n      // load the wrong letter\r\n      context.load(r, \"text\");\r\n      await context.sync();\r\n      const wrong = r.text;\r\n      // decide the correct letter, respecting uppercase\r\n      const corr =\r\n        wrong === \"s\" ? \"z\" :\r\n        wrong === \"S\" ? \"Z\" :\r\n        wrong === \"z\" ? \"s\" :\r\n        wrong === \"Z\" ? \"S\" :\r\n        wrong;\r\n\r\n      r.insertText(corr, Word.InsertLocation.replace);\r\n      r.font.highlightColor = null;\r\n\r\n      // advance index and select next\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        const nxt = state.errors[state.currentIndex];\r\n        context.trackedObjects.add(nxt);\r\n        nxt.select();\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    // remove the one we fixed\r\n    state.errors.splice(state.currentIndex - 1, 1);\r\n    if (state.currentIndex > state.errors.length) {\r\n      state.currentIndex = 0;\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n// ---------------------------------\r\n// 3) Reject one (clear & advance)\r\n// ---------------------------------\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const r = state.errors[state.currentIndex];\r\n      context.trackedObjects.add(r);\r\n\r\n      r.font.highlightColor = null;\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        const nxt = state.errors[state.currentIndex];\r\n        context.trackedObjects.add(nxt);\r\n        nxt.select();\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    // remove the one we skipped\r\n    state.errors.splice(state.currentIndex - 1, 1);\r\n    if (state.currentIndex > state.errors.length) {\r\n      state.currentIndex = 0;\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n// --------------------------------\r\n// 4) Accept All (bulk replace all)\r\n// --------------------------------\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // load all texts\r\n      for (let r of state.errors) context.load(r, \"text\");\r\n      await context.sync();\r\n\r\n      // replace & clear all\r\n      for (let r of state.errors) {\r\n        const w = r.text;\r\n        const c =\r\n          w === \"s\" ? \"z\" :\r\n          w === \"S\" ? \"Z\" :\r\n          w === \"z\" ? \"s\" :\r\n          w === \"Z\" ? \"S\" :\r\n          w;\r\n        r.insertText(c, Word.InsertLocation.replace);\r\n        r.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n    });\r\n\r\n    state.errors = [];\r\n    state.currentIndex = 0;\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n// ---------------------------------\r\n// 5) Reject All (bulk clear highlights)\r\n// ---------------------------------\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (let r of state.errors) {\r\n        r.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n    });\r\n\r\n    state.errors = [];\r\n    state.currentIndex = 0;\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","nextWord","m","normalize","match","first","toLowerCase","voiceless","Set","test","digitMap","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchWholeWord","matchCase","sRes","context","document","body","search","zRes","load","sync","candidates","items","filter","r","text","after","getRange","getNextTextRange","nxt","trim","actual","expect","trackedObjects","add","push","length","select","type","message","icon","console","error","acceptCurrentChange","wrong","corr","insertText","InsertLocation","replace","splice","rejectCurrentChange","acceptAllChanges","w","c","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}