{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID = \"noErrors\";\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false,\r\n};\r\n\r\n// –– Helpers ––\r\nfunction clearNotification(id) {\r\n  if (Office?.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office?.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n// –– Logic to choose correct “s” or “z” ––\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n\r\n  const first = match[0].toLowerCase();\r\n  const unvoiced = new Set([\"c\", \"č\", \"f\", \"h\", \"k\", \"p\", \"s\", \"š\", \"t\"]);\r\n  const numMap = {\r\n    \"1\": \"e\", \"2\": \"d\", \"3\": \"t\", \"4\": \"š\", \"5\": \"p\",\r\n    \"6\": \"š\", \"7\": \"s\", \"8\": \"o\", \"9\": \"d\", \"0\": \"n\"\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n// –– Main Command ––\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const allRanges = [];\r\n\r\n      async function find(scope) {\r\n        const s = scope.search(\"s\", opts);\r\n        const z = scope.search(\"z\", opts);\r\n        s.load(\"items\"); z.load(\"items\");\r\n        await context.sync();\r\n        allRanges.push(...s.items, ...z.items);\r\n      }\r\n\r\n      // Scan body\r\n      await find(context.document.body);\r\n\r\n      // Scan all table cells\r\n      const tables = context.document.body.tables;\r\n      tables.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const table of tables.items) {\r\n        for (let r = 0; r < table.rowCount; r++) {\r\n          for (let c = 0; c < table.columnCount; c++) {\r\n            const cell = table.getCell(r, c);\r\n            await find(cell.body);\r\n          }\r\n        }\r\n      }\r\n\r\n      const candidates = allRanges.filter(r =>\r\n        [\"s\", \"z\"].includes(r.text.trim().toLowerCase())\r\n      );\r\n\r\n      console.log(`→ found ${candidates.length} s/z candidates`);\r\n\r\n      const errors = [];\r\n\r\n      for (let prep of candidates) {\r\n        const after = prep.getRange(Word.RangeLocation.After);\r\n        after.expandTo(Word.TextRangeUnit.Word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.replace(/^[\\s.,;:!?]+/, \"\").trim();\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expected = determineCorrectPreposition(nextWord);\r\n\r\n        if (expected && actual !== expected) {\r\n          errors.push({ range: prep, suggestion: expected });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(`→ mismatches found: ${errors.length}`);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// –– Accept/Reject Commands ––\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange()\", state.currentIndex, state.errors.length);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange()\", state.currentIndex);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["NOTIF_ID","state","errors","currentIndex","isChecking","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","allRanges","find","scope","s","search","z","load","context","sync","push","items","document","body","tables","table","r","rowCount","c","columnCount","cell","getCell","candidates","filter","includes","text","trim","length","prep","after","getRange","RangeLocation","After","expandTo","TextRangeUnit","nextWord","replace","actual","expected","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}