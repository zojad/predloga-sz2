{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// — Log load for debugging (remove if you like) —\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages &&\r\n      typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages &&\r\n      typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic helper ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word  = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Exposed Commands ––//\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"checkDocumentText()\"); // debug\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // Reset any previous highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // Wildcard search for a single letter s or z\r\n      const searchOptions = {\r\n        matchCase: false,\r\n        matchWholeWord: true,\r\n        includeWildcards: true\r\n      };\r\n      const found = context.document.body.search(\"[sz]\", searchOptions);\r\n      found.load(\"items\");\r\n      await context.sync();\r\n\r\n      // Filter to exactly \"s\" or \"z\"\r\n      const singles = found.items.filter(r => {\r\n        const t = r.text.trim().toLowerCase();\r\n        return t === \"s\" || t === \"z\";\r\n      });\r\n\r\n      // Build mismatch list\r\n      const mismatches = [];\r\n      for (let prep of singles) {\r\n        const after = prep.getRange(\"After\");\r\n        after.expandTo(Word.TextRangeUnit.word);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          mismatches.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = mismatches;\r\n      console.log(\"→ Found mismatches:\", mismatches);\r\n\r\n      if (mismatches.length === 0) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        // Highlight and select first\r\n        mismatches.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        mismatches[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"acceptCurrentChange()\", state.currentIndex, state.errors.length);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"rejectCurrentChange()\", state.currentIndex);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"acceptAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"rejectAllChanges()\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes. Please try again.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","found","context","document","body","search","matchCase","matchWholeWord","includeWildcards","load","sync","singles","items","filter","r","t","text","trim","mismatches","prep","after","getRange","expandTo","TextRangeUnit","word","nextWord","actual","expect","push","suggestion","length","type","message","icon","persistent","select","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}