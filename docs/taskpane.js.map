{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Helpers for ribbon notifications\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide correct preposition for S/Z and K/H.\r\n * @param {string} nextWord    — the text of the following word\r\n * @param {string} prepLower   — the candidate preposition, already lowercased (\"s\",\"z\",\"k\" or \"h\")\r\n * @returns {\"s\"|\"z\"|\"k\"|\"h\"|null}\r\n */\r\nfunction determineCorrectPreposition(nextWord, prepLower) {\r\n  if (!nextWord) return null;\r\n\r\n  const nw = nextWord.normalize(\"NFC\").trim();\r\n  if (!nw) return null;\r\n\r\n  let ch = nw[0];\r\n  const digitMap = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = (ch >= '0' && ch <= '9') ? digitMap[ch] : ch.toLowerCase();\r\n\r\n  if (prepLower === \"s\" || prepLower === \"z\") {\r\n    const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n    return unvoiced.has(key) ? \"s\" : \"z\";\r\n  }\r\n  if (prepLower === \"k\" || prepLower === \"h\") {\r\n    return (key === \"k\" || key === \"g\") ? \"h\" : \"k\";\r\n  }\r\n  return null;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// Utility: build list of body, headers, and footers\r\n// ─────────────────────────────────────────────────\r\nasync function collectScanRanges(context) {\r\n  const ranges = [ context.document.body ];\r\n\r\n  const sections = context.document.sections;\r\n  sections.load(\"items\");\r\n  await context.sync();\r\n\r\n  for (const section of sections.items) {\r\n    // note the .body on each header/footer\r\n    ranges.push(section.getHeader(\"primary\").body);\r\n    ranges.push(section.getFooter(\"primary\").body);\r\n  }\r\n\r\n  return ranges;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z/K/H: highlight all mismatches, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear highlights in body\r\n      context.document.body.font.highlightColor = null;\r\n\r\n      // clear highlights in headers/footers bodies\r\n      const sections = context.document.sections;\r\n      sections.load(\"items\");\r\n      await context.sync();\r\n      for (const sec of sections.items) {\r\n        sec.getHeader(\"primary\").body.font.highlightColor = null;\r\n        sec.getFooter(\"primary\").body.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n      const mismatches = [];\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          mismatches.push(r);\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept All: replace every mismatch in one batch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          const replacement = raw === raw.toUpperCase()\r\n            ? expected.toUpperCase()\r\n            : expected;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.insertText(replacement, Word.InsertLocation.replace);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject All: clear every pink mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          if (!/^[sSzZkKhH]$/.test(raw)) continue;\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // “Check S/Z”\n    document.getElementById(\"checkTextButton\").onclick = async () => {\n      await checkDocumentText();\n    };\n    // “Accept All”\n    document.getElementById(\"acceptAllButton\").onclick = async () => {\n      await acceptAllChanges();\n    };\n    // “Reject All”\n    document.getElementById(\"rejectAllButton\").onclick = async () => {\n      await rejectAllChanges();\n    };\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","nextWord","prepLower","nw","normalize","trim","ch","key","toLowerCase","Set","has","async","collectScanRanges","context","ranges","document","body","sections","load","sync","section","items","push","getHeader","getFooter","onReady","info","host","HostType","Word","getElementById","onclick","run","font","highlightColor","sec","matchWholeWord","matchCase","scanRanges","mismatches","rng","sRes","search","zRes","kRes","hRes","r","lower","text","includes","after","getRange","getNextTextRange","nxt","expected","trackedObjects","add","length","first","select","type","message","icon","e","console","error","checkDocumentText","raw","replacement","toUpperCase","insertText","InsertLocation","replace","acceptAllChanges","test","rejectAllChanges"],"sourceRoot":""}