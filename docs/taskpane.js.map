{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Helpers for ribbon notifications\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide correct preposition for S/Z and K/H.\r\n * @param {string} nextWord    — the text of the following word\r\n * @param {string} prepLower   — the candidate preposition, already lowercased (\"s\",\"z\",\"k\" or \"h\")\r\n * @returns {\"s\"|\"z\"|\"k\"|\"h\"|null}\r\n */\r\nfunction determineCorrectPreposition(nextWord, prepLower) {\r\n  if (!nextWord) return null;\r\n\r\n  // grab first letter or digit of nextWord\r\n  const m = nextWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const first = m[0].toLowerCase();\r\n\r\n  // S/Z logic: unvoiced ⇒ \"s\", otherwise \"z\"\r\n  if (prepLower === \"s\" || prepLower === \"z\") {\r\n    const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n    const digitMap = {\r\n      '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n      '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n    };\r\n    const key = /\\d/.test(first) ? digitMap[first] : first;\r\n    return unvoiced.has(key) ? \"s\" : \"z\";\r\n  }\r\n\r\n  // K/H logic: before k or g ⇒ \"h\", otherwise \"k\"\r\n  if (prepLower === \"k\" || prepLower === \"h\") {\r\n    return (first === \"k\" || first === \"g\") ? \"h\" : \"k\";\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z/K/H: highlight all mismatches, select first\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear *all* highlights (so we can re-scan cleanly)\r\n      context.document.body.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      // search for standalone \"s\",\"z\",\"k\",\"h\"\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      const kRes = context.document.body.search(\"k\", opts);\r\n      const hRes = context.document.body.search(\"h\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      kRes.load(\"items\"); hRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      const mismatches = [];\r\n\r\n      // flatten all four result sets\r\n      for (const r of [\r\n        ...sRes.items,\r\n        ...zRes.items,\r\n        ...kRes.items,\r\n        ...hRes.items\r\n      ]) {\r\n        const raw = r.text.trim();\r\n        const lower = raw.toLowerCase();\r\n        if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n        // get the next word\r\n        const after = r\r\n          .getRange(\"After\")\r\n          .getNextTextRange(\r\n            [\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"],\r\n            true\r\n          );\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // decide what it should be\r\n        const expected = determineCorrectPreposition(nxt, lower);\r\n        if (!expected || expected === lower) continue;\r\n\r\n        // highlight and queue\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        mismatches.push(r);\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first one\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept All: replace every mismatch in one batch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      const kRes = context.document.body.search(\"k\", opts);\r\n      const hRes = context.document.body.search(\"h\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      kRes.load(\"items\"); hRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [\r\n        ...sRes.items,\r\n        ...zRes.items,\r\n        ...kRes.items,\r\n        ...hRes.items\r\n      ]) {\r\n        const raw = r.text.trim();\r\n        const lower = raw.toLowerCase();\r\n        if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n        // peek at next word\r\n        const after = r\r\n          .getRange(\"After\")\r\n          .getNextTextRange(\r\n            [\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"],\r\n            true\r\n          );\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // get expected\r\n        const expected = determineCorrectPreposition(nxt, lower);\r\n        if (!expected || expected === lower) continue;\r\n\r\n        // preserve uppercase if needed\r\n        const replacement =\r\n          raw === raw.toUpperCase() ? expected.toUpperCase() : expected;\r\n\r\n        context.trackedObjects.add(r);\r\n        r.insertText(replacement, Word.InsertLocation.replace);\r\n        r.font.highlightColor = null;\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject All: clear every pink mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      const kRes = context.document.body.search(\"k\", opts);\r\n      const hRes = context.document.body.search(\"h\", opts);\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      kRes.load(\"items\"); hRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [\r\n        ...sRes.items,\r\n        ...zRes.items,\r\n        ...kRes.items,\r\n        ...hRes.items\r\n      ]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZkKhH]$/.test(raw)) continue;\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = null;\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // “Check S/Z”\n    document.getElementById(\"checkTextButton\").onclick = async () => {\n      await checkDocumentText();\n    };\n    // “Accept All”\n    document.getElementById(\"acceptAllButton\").onclick = async () => {\n      await acceptAllChanges();\n    };\n    // “Reject All”\n    document.getElementById(\"rejectAllButton\").onclick = async () => {\n      await rejectAllChanges();\n    };\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","nextWord","prepLower","m","normalize","match","first","toLowerCase","unvoiced","Set","digitMap","key","test","has","onReady","info","host","HostType","Word","document","getElementById","onclick","async","run","context","body","font","highlightColor","sync","matchWholeWord","matchCase","sRes","search","zRes","kRes","hRes","load","mismatches","r","items","lower","text","trim","includes","after","getRange","getNextTextRange","nxt","expected","trackedObjects","add","push","length","select","type","message","icon","e","console","error","checkDocumentText","raw","replacement","toUpperCase","insertText","InsertLocation","replace","acceptAllChanges","rejectAllChanges"],"sourceRoot":""}