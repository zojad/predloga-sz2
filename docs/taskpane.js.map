{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// ─────────────────────────────────────────────────\r\n// Helpers for ribbon notifications\r\n// ─────────────────────────────────────────────────\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide correct preposition for S/Z and K/H.\r\n * @param {string} nextWord    — the text of the following word\r\n * @param {string} prepLower   — the candidate preposition, already lowercased\r\n * @returns {\"s\"|\"z\"|\"k\"|\"h\"|null}\r\n */\r\nfunction determineCorrectPreposition(nextWord, prepLower) {\r\n  if (!nextWord) return null;\r\n\r\n  const nw = nextWord.normalize(\"NFC\").trim();\r\n  if (!nw) return null;\r\n\r\n  let ch = nw[0];\r\n  const digitMap = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n  const key = (ch >= '0' && ch <= '9') ? digitMap[ch] : ch.toLowerCase();\r\n\r\n  if (prepLower === \"s\" || prepLower === \"z\") {\r\n    const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n    return unvoiced.has(key) ? \"s\" : \"z\";\r\n  }\r\n  if (prepLower === \"k\" || prepLower === \"h\") {\r\n    return (key === \"k\" || key === \"g\") ? \"h\" : \"k\";\r\n  }\r\n  return null;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// Build a list of Ranges: body + any real headers/footers\r\n// ─────────────────────────────────────────────────\r\nasync function collectScanRanges(context) {\r\n  const ranges = [ context.document.body ];\r\n\r\n  // if the sections API exists, attempt to pull in primary header/footer bodies\r\n  if (context.document.sections && context.document.sections.load) {\r\n    const sections = context.document.sections;\r\n    sections.load(\"items\");\r\n    await context.sync();\r\n\r\n    for (const section of sections.items) {\r\n      // wrap in try/catch in case this host doesn't support headers\r\n      try {\r\n        const hdr = section.getHeader(\"primary\");\r\n        if (hdr && hdr.body) ranges.push(hdr.body);\r\n      } catch { /* no header here */ }\r\n\r\n      try {\r\n        const ftr = section.getFooter(\"primary\");\r\n        if (ftr && ftr.body) ranges.push(ftr.body);\r\n      } catch { /* no footer here */ }\r\n    }\r\n  }\r\n\r\n  return ranges;\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check: clear highlights, scan all ranges, highlight mismatches\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      // clear any prior highlights in *every* range\r\n      for (const rng of scanRanges) {\r\n        rng.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n\r\n      const mismatches = [];\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          mismatches.push(r);\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!mismatches.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        const first = mismatches[0];\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept All: replace and clear each mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          const lower = raw.toLowerCase();\r\n          if (![\"s\",\"z\",\"k\",\"h\"].includes(lower)) continue;\r\n\r\n          const after = r\r\n            .getRange(\"After\")\r\n            .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n          after.load(\"text\");\r\n          await context.sync();\r\n\r\n          const nxt = after.text.trim();\r\n          if (!nxt) continue;\r\n\r\n          const expected = determineCorrectPreposition(nxt, lower);\r\n          if (!expected || expected === lower) continue;\r\n\r\n          const replacement = raw === raw.toUpperCase()\r\n            ? expected.toUpperCase()\r\n            : expected;\r\n\r\n          context.trackedObjects.add(r);\r\n          r.insertText(replacement, Word.InsertLocation.replace);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Accepted all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Accept all failed.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject All: just clear existing highlights\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const scanRanges = await collectScanRanges(context);\r\n\r\n      for (const rng of scanRanges) {\r\n        const sRes = rng.search(\"s\", opts);\r\n        const zRes = rng.search(\"z\", opts);\r\n        const kRes = rng.search(\"k\", opts);\r\n        const hRes = rng.search(\"h\", opts);\r\n        sRes.load(\"items\"); zRes.load(\"items\");\r\n        kRes.load(\"items\"); hRes.load(\"items\");\r\n        await context.sync();\r\n\r\n        for (const r of [...sRes.items, ...zRes.items, ...kRes.items, ...hRes.items]) {\r\n          const raw = r.text.trim();\r\n          if (!/^[sSzZkKhH]$/.test(raw)) continue;\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = null;\r\n        }\r\n      }\r\n\r\n      await context.sync();\r\n    });\r\n\r\n    showNotification(NOTIF_ID, {\r\n      type: \"informationalMessage\",\r\n      message: \"Cleared all!\",\r\n      icon: \"Icon.80x80\"\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Reject all failed.\"\r\n    });\r\n  }\r\n}\r\n","/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    // “Check S/Z”\n    document.getElementById(\"checkTextButton\").onclick = async () => {\n      await checkDocumentText();\n    };\n    // “Accept All”\n    document.getElementById(\"acceptAllButton\").onclick = async () => {\n      await acceptAllChanges();\n    };\n    // “Reject All”\n    document.getElementById(\"rejectAllButton\").onclick = async () => {\n      await rejectAllChanges();\n    };\n  }\n});\n"],"names":["NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","nextWord","prepLower","nw","normalize","trim","ch","key","toLowerCase","Set","has","async","collectScanRanges","context","ranges","document","body","sections","load","sync","section","items","hdr","getHeader","push","ftr","getFooter","onReady","info","host","HostType","Word","getElementById","onclick","run","matchWholeWord","matchCase","scanRanges","rng","font","highlightColor","mismatches","sRes","search","zRes","kRes","hRes","r","lower","text","includes","after","getRange","getNextTextRange","nxt","expected","trackedObjects","add","length","first","select","type","message","icon","e","console","error","checkDocumentText","raw","replacement","toUpperCase","insertText","InsertLocation","replace","acceptAllChanges","test","rejectAllChanges"],"sourceRoot":""}