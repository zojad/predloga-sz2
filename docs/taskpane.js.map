{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap = {\r\n    '1': 'e', '2': 'd', '3': 't', '4': 'š', '5': 'p',\r\n    '6': 'š', '7': 's', '8': 'o', '9': 'd', '0': 'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", state);\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run(start)\");\r\n\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sSearch = context.document.body.search(\"s\", opts);\r\n      const zSearch = context.document.body.search(\"z\", opts);\r\n      sSearch.load(\"items\");\r\n      zSearch.load(\"items\");\r\n      await context.sync();\r\n\r\n      const allRanges = [...sSearch.items, ...zSearch.items];\r\n      console.log(\"→ found\", allRanges.length, \"s/z candidates\");\r\n\r\n      const candidates = allRanges.filter(r => [\"s\", \"z\"].includes(r.text.trim().toLowerCase()));\r\n      const errors = [];\r\n\r\n      for (const prep of candidates) {\r\n        const after = prep.getRange(\"After\");\r\n        const nextWords = after.getTextRanges([\" \"], true); // Split by space, trim=true\r\n        nextWords.load(\"items\");\r\n        await context.sync();\r\n\r\n        const nextWord = nextWords.items[0]?.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ mismatches found:\", errors.length);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No 's'/'z' mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n  }\r\n}\r\n\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sSearch","context","document","body","search","zSearch","load","sync","allRanges","items","length","candidates","filter","r","includes","text","trim","prep","nextWords","getRange","getTextRanges","nextWord","actual","expect","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}