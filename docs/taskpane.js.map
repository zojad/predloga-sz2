{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // Array<{ range: Word.Range, suggestion: \"s\"|\"S\"|\"z\"|\"Z\" }>\r\n  currentIndex: 0\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n// — Helpers for ribbon notifications —\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n/**\r\n * Decide between \"s\" vs \"z\" based on the first\r\n * letter of the next word (unvoiced=“s”, otherwise “z”).\r\n */\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n                       '6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return unvoiced.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Check S/Z: ALWAYS do a fresh scan & highlight\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // *** Release any old tracked Ranges so they cannot linger ***\r\n      context.trackedObjects.releaseAll();\r\n      await context.sync();\r\n\r\n      // — Clear any previous highlights on standalone s/z —\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // — Find every standalone “s” or “z” —\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord: true, matchCase: false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord: true, matchCase: false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      // — Evaluate each candidate for a mismatch —\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const raw = r.text.trim();\r\n        if (!/^[sSzZ]$/.test(raw)) continue;\r\n\r\n        // grab the very next word\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n\r\n        // decide expected and compare\r\n        const expectedLower = determineCorrectPreposition(nxt);\r\n        if (!expectedLower || expectedLower === raw.toLowerCase()) continue;\r\n\r\n        // preserve capitalization\r\n        const suggestion = raw === raw.toUpperCase()\r\n          ? expectedLower.toUpperCase()\r\n          : expectedLower;\r\n\r\n        // track, highlight, queue\r\n        context.trackedObjects.add(r);\r\n        r.font.highlightColor = HIGHLIGHT_COLOR;\r\n        state.errors.push({ range: r, suggestion });\r\n      }\r\n\r\n      await context.sync();\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select the first one\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept One: replace, clear highlight, advance & select next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range, suggestion } = state.errors[state.currentIndex];\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n\r\n    state.currentIndex++;\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select(Word.SelectionMode.select);\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject One: clear highlight, advance & select next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range } = state.errors[state.currentIndex];\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n\r\n    state.currentIndex++;\r\n    if (state.currentIndex < state.errors.length) {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select(Word.SelectionMode.select);\r\n      await context.sync();\r\n    }\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept All: replace & clear all in one go\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject All: clear all highlights in one go\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  clearNotification(NOTIF_ID);\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","NOTIF_ID","clearNotification","id","Office","NotificationMessages","deleteAsync","showNotification","opts","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","unvoiced","Set","key","test","has","async","checkDocumentText","Word","run","context","trackedObjects","releaseAll","sync","oldS","document","body","search","matchWholeWord","matchCase","oldZ","load","items","forEach","r","font","highlightColor","sRes","zRes","raw","text","trim","after","getRange","getNextTextRange","nxt","expectedLower","suggestion","toUpperCase","add","push","range","length","first","select","type","message","icon","e","console","error","acceptCurrentChange","insertText","InsertLocation","replace","next","SelectionMode","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}