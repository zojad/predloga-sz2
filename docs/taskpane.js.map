{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.deleteAsync === \"function\") {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\n\r\nfunction showNotification(id, options) {\r\n  if (Office.NotificationMessages && typeof Office.NotificationMessages.addAsync === \"function\") {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const match = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap = {'1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n'};\r\n  return (/[0-9]/.test(first)\r\n    ? (unvoiced.has(numMap[first]) ? 's' : 'z')\r\n    : (unvoiced.has(first) ? 's' : 'z')\r\n  );\r\n}\r\n\r\n// --- CORE: find and highlight errors ---\r\nexport async function checkDocumentText() {\r\n  console.log('▶ checkDocumentText');\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear old highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n\r\n      // search standalone s/z\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sRes = context.document.body.search('s', opts);\r\n      const zRes = context.document.body.search('z', opts);\r\n      sRes.load('items'); zRes.load('items');\r\n      await context.sync();\r\n\r\n      const all = [...sRes.items, ...zRes.items];\r\n      for (const prep of all) {\r\n        const after = prep.getRange('After');\r\n        const nxtR = after.getNextTextRange([' ', '\\n', '.', ',', ';', '?', '!'], true);\r\n        nxtR.load('text'); await context.sync();\r\n        const nxt = nxtR.text.trim();\r\n        if (!nxt) continue;\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nxt);\r\n        if (expect && actual !== expect) {\r\n          context.trackedObjects.add(prep);\r\n          state.errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      console.log(`→ mismatches: ${state.errors.length}`);\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, { type: 'informationalMessage', message: \"✨ No mismatches!\", icon: 'Icon.80x80' });\r\n      } else {\r\n        state.errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select(); await context.sync();\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('checkDocumentText error', err);\r\n    showNotification('checkError', { type: 'errorMessage', message: 'Check failed', persistent: false });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// --- Accept one --- process first error and select next ---\r\nexport async function acceptCurrentChange() {\r\n  console.log('▶ acceptCurrentChange');\r\n  if (!state.errors.length) return;\r\n\r\n  const err = state.errors.shift();\r\n  try {\r\n    await Word.run(async context => {\r\n      context.trackedObjects.add(err.range);\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n    });\r\n  } catch (e) {\r\n    console.error('acceptCurrentChange error', e);\r\n  }\r\n\r\n  // select next if available\r\n  if (state.errors.length) {\r\n    try {\r\n      await Word.run(async context => {\r\n        const next = state.errors[0].range;\r\n        context.trackedObjects.add(next);\r\n        next.select(); await context.sync();\r\n      });\r\n    } catch (e) {\r\n      console.error('acceptCurrentChange select next error', e);\r\n    }\r\n  } else {\r\n    showNotification(NOTIF_ID, { type: 'informationalMessage', message: 'All changes accepted!', icon: 'Icon.80x80' });\r\n  }\r\n}\r\n\r\n// --- Reject one --- clear first highlight and select next ---\r\nexport async function rejectCurrentChange() {\r\n  console.log('▶ rejectCurrentChange');\r\n  if (!state.errors.length) return;\r\n\r\n  const err = state.errors.shift();\r\n  try {\r\n    await Word.run(async context => {\r\n      context.trackedObjects.add(err.range);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n    });\r\n  } catch (e) {\r\n    console.error('rejectCurrentChange error', e);\r\n  }\r\n\r\n  if (state.errors.length) {\r\n    try {\r\n      await Word.run(async context => {\r\n        const next = state.errors[0].range;\r\n        context.trackedObjects.add(next);\r\n        next.select(); await context.sync();\r\n      });\r\n    } catch (e) {\r\n      console.error('rejectCurrentChange select next error', e);\r\n    }\r\n  } else {\r\n    showNotification(NOTIF_ID, { type: 'informationalMessage', message: 'All highlights cleared!', icon: 'Icon.80x80' });\r\n  }\r\n}\r\n\r\n// --- Accept all --- apply all suggestions ---\r\nexport async function acceptAllChanges() {\r\n  console.log('▶ acceptAllChanges');\r\n  if (!state.errors.length) return;\r\n\r\n  const errorsToAccept = state.errors.slice();\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of errorsToAccept) {\r\n        context.trackedObjects.add(err.range);\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n        await context.sync();\r\n      }\r\n    });\r\n    showNotification(NOTIF_ID, { type: 'informationalMessage', message: 'Accepted all!', icon: 'Icon.80x80' });\r\n  } catch (e) {\r\n    console.error('acceptAllChanges error', e);\r\n  }\r\n}\r\n\r\n// --- Reject all --- clear all highlights ---\r\nexport async function rejectAllChanges() {\r\n  console.log('▶ rejectAllChanges');\r\n  if (!state.errors.length) return;\r\n\r\n  const errorsToClear = state.errors.slice();\r\n  state.errors = [];\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of errorsToClear) {\r\n        context.trackedObjects.add(err.range);\r\n        err.range.font.highlightColor = null;\r\n        await context.sync();\r\n      }\r\n    });\r\n    showNotification(NOTIF_ID, { type: 'informationalMessage', message: 'Cleared all!', icon: 'Icon.80x80' });\r\n  } catch (e) {\r\n    console.error('rejectAllChanges error', e);\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","console","log","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sRes","context","document","body","search","zRes","load","sync","all","items","prep","nxtR","getRange","getNextTextRange","nxt","text","trim","actual","expect","trackedObjects","add","push","suggestion","length","select","type","message","icon","err","error","persistent","acceptCurrentChange","shift","insertText","InsertLocation","replace","next","rejectCurrentChange","acceptAllChanges","errorsToAccept","slice","rejectAllChanges","errorsToClear","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}