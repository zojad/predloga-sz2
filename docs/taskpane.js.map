{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nlet state = {\r\n  errors: [],        // Array of { range: Word.Range, suggestion: \"s\"|\"z\" }\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const m = rawWord.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return voiceless.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // clear old highlights\r\n      const oldS = context.document.body.search(\"s\", { matchWholeWord:true, matchCase:false });\r\n      const oldZ = context.document.body.search(\"z\", { matchWholeWord:true, matchCase:false });\r\n      oldS.load(\"items\"); oldZ.load(\"items\");\r\n      await context.sync();\r\n      [...oldS.items, ...oldZ.items].forEach(r => r.font.highlightColor = null);\r\n      await context.sync();\r\n\r\n      // find new mismatches\r\n      const sRes = context.document.body.search(\"s\", { matchWholeWord:true, matchCase:false });\r\n      const zRes = context.document.body.search(\"z\", { matchWholeWord:true, matchCase:false });\r\n      sRes.load(\"items\"); zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      for (const r of [...sRes.items, ...zRes.items]) {\r\n        const t = r.text.trim().toLowerCase();\r\n        if (t!==\"s\" && t!==\"z\") continue;\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n        const nxt = after.text.trim();\r\n        if (!nxt) continue;\r\n        const expected = determineCorrectPreposition(nxt);\r\n        if (expected && expected!==t) {\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          state.errors.push({ range: r, suggestion: expected });\r\n        }\r\n      }\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // select first\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"check error\", e);\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange fired; errors in queue:\", state.errors.length, \"currentIndex:\", state.currentIndex);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  // pull out the current mismatch\r\n  const { range, suggestion } = state.errors.splice(state.currentIndex, 1)[0];\r\n  console.log(\"   replacing:\", range.text, \"→\", suggestion);\r\n\r\n  // 1) replace & clear highlight\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // 2) select the next one, if present\r\n  if (state.currentIndex < state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange fired; errors in queue:\", state.errors.length, \"currentIndex:\", state.currentIndex);\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range } = state.errors.splice(state.currentIndex, 1)[0];\r\n  console.log(\"   clearing highlight for:\", range.text);\r\n\r\n  // 1) clear highlight\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // 2) select next\r\n  if (state.currentIndex < state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges fired\");\r\n  // fresh scan so nothing is left behind\r\n  await checkDocumentText();\r\n  console.log(\"   after rescan, errors:\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, { type: \"informationalMessage\", message: \"Accepted all!\" });\r\n}\r\n\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges fired\");\r\n  // fresh scan so nothing is left behind\r\n  await checkDocumentText();\r\n  console.log(\"   after rescan, errors:\", state.errors.length);\r\n  if (!state.errors.length) return;\r\n\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n  showNotification(NOTIF_ID, { type: \"informationalMessage\", message: \"Cleared all!\" });\r\n}\r\n\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","opts","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","m","normalize","match","c","toLowerCase","voiceless","Set","key","test","has","async","checkDocumentText","deleteAsync","Word","run","oldS","context","document","body","search","matchWholeWord","matchCase","oldZ","load","sync","items","forEach","r","font","highlightColor","sRes","zRes","t","text","trim","after","getRange","getNextTextRange","nxt","expected","push","range","suggestion","length","first","trackedObjects","add","select","type","message","icon","e","console","error","acceptCurrentChange","log","splice","insertText","InsertLocation","replace","next","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}