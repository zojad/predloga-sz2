{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\n// — quick log so we know this bundle loaded —\r\nconsole.log(\"⭐ preposition.js loaded\");\r\n\r\nlet state = {\r\n  errors: [],\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\n//–– Helpers ––//\r\nfunction clearNotification(id) {\r\n  if (\r\n    Office.NotificationMessages &&\r\n    typeof Office.NotificationMessages.deleteAsync === \"function\"\r\n  ) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, options) {\r\n  if (\r\n    Office.NotificationMessages &&\r\n    typeof Office.NotificationMessages.addAsync === \"function\"\r\n  ) {\r\n    Office.NotificationMessages.addAsync(id, options);\r\n  }\r\n}\r\n\r\n//–– Core logic ––//\r\nfunction determineCorrectPreposition(rawWord) {\r\n  if (!rawWord) return null;\r\n  const word = rawWord.normalize(\"NFC\");\r\n  const match = word.match(/[\\p{L}0-9]/u);\r\n  if (!match) return null;\r\n  const first = match[0].toLowerCase();\r\n\r\n  const unvoiced = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const numMap   = {\r\n    '1':'e','2':'d','3':'t','4':'š','5':'p',\r\n    '6':'š','7':'s','8':'o','9':'d','0':'n'\r\n  };\r\n\r\n  if (/\\d/.test(first)) {\r\n    return unvoiced.has(numMap[first]) ? \"s\" : \"z\";\r\n  }\r\n  return unvoiced.has(first) ? \"s\" : \"z\";\r\n}\r\n\r\n//–– Exported commands ––//\r\nexport async function checkDocumentText() {\r\n  console.log(\"▶ checkDocumentText()\", { isChecking: state.isChecking });\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      console.log(\"→ Word.run start\");\r\n\r\n      // clear old highlights\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      state.errors = [];\r\n      state.currentIndex = 0;\r\n\r\n      // find all lone “s” and “z”\r\n      const opts = { matchCase: false, matchWholeWord: true };\r\n      const sR = context.document.body.search(\"s\", opts);\r\n      const zR = context.document.body.search(\"z\", opts);\r\n      sR.load(\"items\"); zR.load(\"items\");\r\n      await context.sync();\r\n\r\n      const raw = [...sR.items, ...zR.items];\r\n      console.log(\"→ raw hits:\", raw.length);\r\n\r\n      // filter out anything that isn’t exactly “s” or “z”\r\n      const candidates = raw.filter(r =>\r\n        [\"s\",\"z\"].includes(r.text.trim().toLowerCase())\r\n      );\r\n      console.log(\"→ filtered candidates:\", candidates.length);\r\n\r\n      let errors = [];\r\n      for (const prep of candidates) {\r\n        // ** FIX 1 ** Use the enum, not a string:\r\n        const after = prep.getRange(Word.RangeLocation.after);\r\n\r\n        // ** FIX 2 ** Expand to the next word:\r\n        after.expandTo(Word.TextRangeUnit.word);\r\n\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual = prep.text.trim().toLowerCase();\r\n        const expect = determineCorrectPreposition(nextWord);\r\n        if (expect && actual !== expect) {\r\n          errors.push({ range: prep, suggestion: expect });\r\n        }\r\n      }\r\n\r\n      state.errors = errors;\r\n      console.log(\"→ mismatches found:\", errors.length);\r\n\r\n      if (!errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"🎉 No ‘s’/‘z’ mismatches!\",\r\n          icon: \"Icon.80x80\",\r\n          persistent: false\r\n        });\r\n      } else {\r\n        // highlight them & jump to the first\r\n        errors.forEach(e => e.range.font.highlightColor = HIGHLIGHT_COLOR);\r\n        await context.sync();\r\n        errors[0].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(\"checkError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\",\r\n      persistent: false\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\nexport async function acceptCurrentChange() {\r\n  console.log(\"▶ acceptCurrentChange()\", { i: state.currentIndex, tot: state.errors.length });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptCurrentChange error\", e);\r\n    showNotification(\"acceptError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply change. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectCurrentChange() {\r\n  console.log(\"▶ rejectCurrentChange()\", { i: state.currentIndex });\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      const err = state.errors[state.currentIndex];\r\n      err.range.font.highlightColor = null;\r\n      await context.sync();\r\n\r\n      state.currentIndex++;\r\n      if (state.currentIndex < state.errors.length) {\r\n        state.errors[state.currentIndex].range.select();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectCurrentChange error\", e);\r\n    showNotification(\"rejectError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to reject. Please re-run the check.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function acceptAllChanges() {\r\n  console.log(\"▶ acceptAllChanges()\", { tot: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      for (const err of state.errors) {\r\n        err.range.insertText(err.suggestion, Word.InsertLocation.replace);\r\n        err.range.font.highlightColor = null;\r\n      }\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"acceptAllChanges error\", e);\r\n    showNotification(\"acceptAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to apply all changes.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n\r\nexport async function rejectAllChanges() {\r\n  console.log(\"▶ rejectAllChanges()\", { tot: state.errors.length });\r\n  if (!state.errors.length) return;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      state.errors.forEach(e => e.range.font.highlightColor = null);\r\n      await context.sync();\r\n      state.errors = [];\r\n    });\r\n  } catch (e) {\r\n    console.error(\"rejectAllChanges error\", e);\r\n    showNotification(\"rejectAllError\", {\r\n      type: \"errorMessage\",\r\n      message: \"Failed to clear changes.\",\r\n      persistent: false\r\n    });\r\n  }\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["console","log","state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","options","Office","NotificationMessages","addAsync","determineCorrectPreposition","rawWord","match","normalize","first","toLowerCase","unvoiced","Set","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","range","font","highlightColor","opts","matchCase","matchWholeWord","sR","context","document","body","search","zR","load","sync","raw","items","length","candidates","filter","r","includes","text","trim","prep","after","getRange","RangeLocation","expandTo","TextRangeUnit","word","nextWord","actual","expect","push","suggestion","select","type","message","icon","persistent","error","acceptCurrentChange","i","tot","err","insertText","InsertLocation","replace","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}