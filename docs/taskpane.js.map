{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/preposition.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/* global Office, Word */\r\n\r\nconst state = {\r\n  errors: [],        // Array of { range: Word.Range, suggestion: \"s\"|\"z\" }\r\n  currentIndex: 0,\r\n  isChecking: false\r\n};\r\n\r\nconst HIGHLIGHT_COLOR = \"#FFC0CB\";\r\nconst NOTIF_ID        = \"noErrors\";\r\n\r\nfunction clearNotification(id) {\r\n  if (Office.NotificationMessages?.deleteAsync) {\r\n    Office.NotificationMessages.deleteAsync(id);\r\n  }\r\n}\r\nfunction showNotification(id, opts) {\r\n  if (Office.NotificationMessages?.addAsync) {\r\n    Office.NotificationMessages.addAsync(id, opts);\r\n  }\r\n}\r\n\r\n// Decide “s” vs “z” from the first letter of the next word\r\nfunction determineCorrectPreposition(word) {\r\n  if (!word) return null;\r\n  const m = word.normalize(\"NFC\").match(/[\\p{L}0-9]/u);\r\n  if (!m) return null;\r\n  const c = m[0].toLowerCase();\r\n  const voiceless = new Set(['c','č','f','h','k','p','s','š','t']);\r\n  const digitMap   = { '1':'e','2':'d','3':'t','4':'š','5':'p','6':'š','7':'s','8':'o','9':'d','0':'n' };\r\n  const key = /\\d/.test(c) ? digitMap[c] : c;\r\n  return voiceless.has(key) ? \"s\" : \"z\";\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 1) Highlight all mismatches & select the first one\r\n// ─────────────────────────────────────────────────\r\nexport async function checkDocumentText() {\r\n  if (state.isChecking) return;\r\n  state.isChecking = true;\r\n  clearNotification(NOTIF_ID);\r\n  state.errors = [];\r\n  state.currentIndex = 0;\r\n\r\n  try {\r\n    await Word.run(async context => {\r\n      // Clear any old highlights\r\n      state.errors.forEach(e => {\r\n        context.trackedObjects.add(e.range);\r\n        e.range.font.highlightColor = null;\r\n      });\r\n      await context.sync();\r\n\r\n      // Search for standalone “s” and “z”\r\n      const opts = { matchWholeWord: true, matchCase: false };\r\n      const sRes = context.document.body.search(\"s\", opts);\r\n      const zRes = context.document.body.search(\"z\", opts);\r\n      sRes.load(\"items\");\r\n      zRes.load(\"items\");\r\n      await context.sync();\r\n\r\n      const candidates = [...sRes.items, ...zRes.items]\r\n        .filter(r => ['s','z'].includes(r.text.trim().toLowerCase()));\r\n\r\n      // For each candidate, look at the next word\r\n      for (const r of candidates) {\r\n        const after = r.getRange(\"After\")\r\n                       .getNextTextRange([\" \", \"\\n\", \".\", \",\", \";\", \"?\", \"!\"], true);\r\n        after.load(\"text\");\r\n        await context.sync();\r\n\r\n        const nextWord = after.text.trim();\r\n        if (!nextWord) continue;\r\n\r\n        const actual   = r.text.trim().toLowerCase();\r\n        const expected = determineCorrectPreposition(nextWord);\r\n        if (expected && actual !== expected) {\r\n          context.trackedObjects.add(r);\r\n          r.font.highlightColor = HIGHLIGHT_COLOR;\r\n          state.errors.push({ range: r, suggestion: expected });\r\n        }\r\n      }\r\n\r\n      if (!state.errors.length) {\r\n        showNotification(NOTIF_ID, {\r\n          type: \"informationalMessage\",\r\n          message: \"✨ No mismatches!\",\r\n          icon: \"Icon.80x80\"\r\n        });\r\n      } else {\r\n        // Select the very first mismatch\r\n        state.currentIndex = 0;\r\n        const first = state.errors[0].range;\r\n        context.trackedObjects.add(first);\r\n        first.select();\r\n        await context.sync();\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(\"checkDocumentText error\", e);\r\n    showNotification(NOTIF_ID, {\r\n      type: \"errorMessage\",\r\n      message: \"Check failed; please try again.\"\r\n    });\r\n  } finally {\r\n    state.isChecking = false;\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 2) Accept one: replace current & then select next\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range, suggestion } = state.errors[state.currentIndex];\r\n  // Remove this from our queue so we don't revisit it\r\n  state.errors.splice(state.currentIndex, 1);\r\n\r\n  // Step 1: replace the letter, clear highlight\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.insertText(suggestion, Word.InsertLocation.replace);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // Step 2: select the next mismatch (if any)\r\n  if (state.currentIndex < state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 3) Reject one: clear current & then select next\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectCurrentChange() {\r\n  if (state.currentIndex >= state.errors.length) return;\r\n\r\n  const { range } = state.errors[state.currentIndex];\r\n  // Drop it from our queue\r\n  state.errors.splice(state.currentIndex, 1);\r\n\r\n  // Step 1: clear highlight\r\n  await Word.run(async context => {\r\n    context.trackedObjects.add(range);\r\n    range.font.highlightColor = null;\r\n    await context.sync();\r\n  });\r\n\r\n  // Step 2: select the next mismatch (if any)\r\n  if (state.currentIndex < state.errors.length) {\r\n    await Word.run(async context => {\r\n      const next = state.errors[state.currentIndex].range;\r\n      context.trackedObjects.add(next);\r\n      next.select();\r\n      await context.sync();\r\n    });\r\n  }\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 4) Accept all: replace every queued mismatch\r\n// ─────────────────────────────────────────────────\r\nexport async function acceptAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  // Replace & clear highlights in one batch\r\n  await Word.run(async context => {\r\n    for (const { range, suggestion } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.insertText(suggestion, Word.InsertLocation.replace);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Accepted all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n\r\n// ─────────────────────────────────────────────────\r\n// 5) Reject all: clear all highlights at once\r\n// ─────────────────────────────────────────────────\r\nexport async function rejectAllChanges() {\r\n  if (!state.errors.length) return;\r\n\r\n  // Clear every highlight in one batch\r\n  await Word.run(async context => {\r\n    for (const { range } of state.errors) {\r\n      context.trackedObjects.add(range);\r\n      range.font.highlightColor = null;\r\n    }\r\n    await context.sync();\r\n  });\r\n\r\n  state.errors = [];\r\n  showNotification(NOTIF_ID, {\r\n    type: \"informationalMessage\",\r\n    message: \"Cleared all!\",\r\n    icon: \"Icon.80x80\"\r\n  });\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office */\n\nimport {\n  checkDocumentText,\n  acceptCurrentChange,\n  rejectCurrentChange,\n  acceptAllChanges,\n  rejectAllChanges\n} from \"../commands/preposition.js\";\n\nOffice.onReady(info => {\n  if (info.host === Office.HostType.Word) {\n    document.getElementById(\"checkTextButton\").onclick   = checkDocumentText;\n    document.getElementById(\"acceptChangeButton\").onclick = acceptCurrentChange;\n    document.getElementById(\"rejectChangeButton\").onclick = rejectCurrentChange;\n    document.getElementById(\"acceptAllButton\").onclick    = acceptAllChanges;\n    document.getElementById(\"rejectAllButton\").onclick    = rejectAllChanges;\n  }\n});\n"],"names":["state","errors","currentIndex","isChecking","NOTIF_ID","showNotification","id","opts","Office","NotificationMessages","addAsync","determineCorrectPreposition","word","m","normalize","match","c","toLowerCase","voiceless","Set","key","test","has","async","checkDocumentText","deleteAsync","Word","run","forEach","e","context","trackedObjects","add","range","font","highlightColor","sync","matchWholeWord","matchCase","sRes","document","body","search","zRes","load","candidates","items","filter","r","includes","text","trim","after","getRange","getNextTextRange","nextWord","actual","expected","push","suggestion","length","first","select","type","message","icon","console","error","acceptCurrentChange","splice","insertText","InsertLocation","replace","next","rejectCurrentChange","acceptAllChanges","rejectAllChanges","onReady","info","host","HostType","getElementById","onclick"],"sourceRoot":""}